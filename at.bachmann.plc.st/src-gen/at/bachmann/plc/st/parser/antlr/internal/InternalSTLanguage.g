/*
* generated by Xtext
*/
grammar InternalSTLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.bachmann.plc.st.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bachmann.plc.st.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bachmann.plc.st.services.STLanguageGrammarAccess;

}

@parser::members {

 	private STLanguageGrammarAccess grammarAccess;
 	
    public InternalSTLanguageParser(TokenStream input, STLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "test";	
   	}
   	
   	@Override
   	protected STLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuletest
entryRuletest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	 iv_ruletest=ruletest 
	 { $current=$iv_ruletest.current; } 
	 EOF 
;

// Rule test
ruletest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_test_0_0=	't' 
    {
        newLeafNode(lv_test_0_0, grammarAccess.getTestAccess().getTestTKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRule());
	        }
       		setWithLastConsumed($current, "test", lv_test_0_0, "t");
	    }

)
)
;







// Entry rule entryRuleNumeric_Literal
entryRuleNumeric_Literal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumeric_LiteralRule()); }
	 iv_ruleNumeric_Literal=ruleNumeric_Literal 
	 { $current=$iv_ruleNumeric_Literal.current; } 
	 EOF 
;

// Rule Numeric_Literal
ruleNumeric_Literal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumeric_LiteralAccess().getInt_LiteralParserRuleCall_0()); 
    }
    this_Int_Literal_0=ruleInt_Literal
    { 
        $current = $this_Int_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumeric_LiteralAccess().getReal_LiteralParserRuleCall_1()); 
    }
    this_Real_Literal_1=ruleReal_Literal
    { 
        $current = $this_Real_Literal_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInt_Literal
entryRuleInt_Literal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInt_LiteralRule()); }
	 iv_ruleInt_Literal=ruleInt_Literal 
	 { $current=$iv_ruleInt_Literal.current; } 
	 EOF 
;

// Rule Int_Literal
ruleInt_Literal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInt_LiteralAccess().getSigned_IntParserRuleCall_0()); 
    }
    this_Signed_Int_0=ruleSigned_Int
    { 
        $current = $this_Signed_Int_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInt_LiteralAccess().getUnsigned_IntParserRuleCall_1()); 
    }
    this_Unsigned_Int_1=ruleUnsigned_Int
    { 
        $current = $this_Unsigned_Int_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleUnsigned_Int_Type_Name
entryRuleUnsigned_Int_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsigned_Int_Type_NameRule()); } 
	 iv_ruleUnsigned_Int_Type_Name=ruleUnsigned_Int_Type_Name 
	 { $current=$iv_ruleUnsigned_Int_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Unsigned_Int_Type_Name
ruleUnsigned_Int_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='USINT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnsigned_Int_Type_NameAccess().getUSINTKeyword_0()); 
    }

    |
	kw='UINT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnsigned_Int_Type_NameAccess().getUINTKeyword_1()); 
    }

    |
	kw='UDINT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnsigned_Int_Type_NameAccess().getUDINTKeyword_2()); 
    }

    |
	kw='ULINT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnsigned_Int_Type_NameAccess().getULINTKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleSigned_Int_Type_Name
entryRuleSigned_Int_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSigned_Int_Type_NameRule()); } 
	 iv_ruleSigned_Int_Type_Name=ruleSigned_Int_Type_Name 
	 { $current=$iv_ruleSigned_Int_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Signed_Int_Type_Name
ruleSigned_Int_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='SINT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigned_Int_Type_NameAccess().getSINTKeyword_0()); 
    }

    |
	kw='INT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigned_Int_Type_NameAccess().getINTKeyword_1()); 
    }

    |
	kw='DINT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigned_Int_Type_NameAccess().getDINTKeyword_2()); 
    }

    |
	kw='LINT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigned_Int_Type_NameAccess().getLINTKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleUnsigned_Int
entryRuleUnsigned_Int returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsigned_IntRule()); }
	 iv_ruleUnsigned_Int=ruleUnsigned_Int 
	 { $current=$iv_ruleUnsigned_Int.current; } 
	 EOF 
;

// Rule Unsigned_Int
ruleUnsigned_Int returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnsigned_IntAccess().getValueUnsigned_Int_ValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleUnsigned_Int_Value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnsigned_IntRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Unsigned_Int_Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleUnsigned_Int_Value
entryRuleUnsigned_Int_Value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsigned_Int_ValueRule()); } 
	 iv_ruleUnsigned_Int_Value=ruleUnsigned_Int_Value 
	 { $current=$iv_ruleUnsigned_Int_Value.current.getText(); }  
	 EOF 
;

// Rule Unsigned_Int_Value
ruleUnsigned_Int_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnsigned_Int_ValueAccess().getUnsigned_Int_Type_NameParserRuleCall_0()); 
    }
    this_Unsigned_Int_Type_Name_0=ruleUnsigned_Int_Type_Name    {
		$current.merge(this_Unsigned_Int_Type_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_BIN_VALUE_1=RULE_BIN_VALUE    {
		$current.merge(this_BIN_VALUE_1);
    }

    { 
    newLeafNode(this_BIN_VALUE_1, grammarAccess.getUnsigned_Int_ValueAccess().getBIN_VALUETerminalRuleCall_1_0()); 
    }

    |    this_OCT_VALUE_2=RULE_OCT_VALUE    {
		$current.merge(this_OCT_VALUE_2);
    }

    { 
    newLeafNode(this_OCT_VALUE_2, grammarAccess.getUnsigned_Int_ValueAccess().getOCT_VALUETerminalRuleCall_1_1()); 
    }

    |    this_DEC_VALUE_3=RULE_DEC_VALUE    {
		$current.merge(this_DEC_VALUE_3);
    }

    { 
    newLeafNode(this_DEC_VALUE_3, grammarAccess.getUnsigned_Int_ValueAccess().getDEC_VALUETerminalRuleCall_1_2()); 
    }

    |    this_HEX_VALUE_4=RULE_HEX_VALUE    {
		$current.merge(this_HEX_VALUE_4);
    }

    { 
    newLeafNode(this_HEX_VALUE_4, grammarAccess.getUnsigned_Int_ValueAccess().getHEX_VALUETerminalRuleCall_1_3()); 
    }
))
    ;





// Entry rule entryRuleSigned_Int
entryRuleSigned_Int returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSigned_IntRule()); }
	 iv_ruleSigned_Int=ruleSigned_Int 
	 { $current=$iv_ruleSigned_Int.current; } 
	 EOF 
;

// Rule Signed_Int
ruleSigned_Int returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSigned_IntAccess().getValueSigned_Int_ValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleSigned_Int_Value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigned_IntRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Signed_Int_Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSigned_Int_Value
entryRuleSigned_Int_Value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSigned_Int_ValueRule()); } 
	 iv_ruleSigned_Int_Value=ruleSigned_Int_Value 
	 { $current=$iv_ruleSigned_Int_Value.current.getText(); }  
	 EOF 
;

// Rule Signed_Int_Value
ruleSigned_Int_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSigned_Int_ValueAccess().getSigned_Int_Type_NameParserRuleCall_0()); 
    }
    this_Signed_Int_Type_Name_0=ruleSigned_Int_Type_Name    {
		$current.merge(this_Signed_Int_Type_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_BIN_VALUE_1=RULE_BIN_VALUE    {
		$current.merge(this_BIN_VALUE_1);
    }

    { 
    newLeafNode(this_BIN_VALUE_1, grammarAccess.getSigned_Int_ValueAccess().getBIN_VALUETerminalRuleCall_1_0()); 
    }

    |    this_OCT_VALUE_2=RULE_OCT_VALUE    {
		$current.merge(this_OCT_VALUE_2);
    }

    { 
    newLeafNode(this_OCT_VALUE_2, grammarAccess.getSigned_Int_ValueAccess().getOCT_VALUETerminalRuleCall_1_1()); 
    }

    |((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigned_Int_ValueAccess().getPlusSignKeyword_1_2_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigned_Int_ValueAccess().getHyphenMinusKeyword_1_2_0_1()); 
    }
)?    this_DEC_VALUE_5=RULE_DEC_VALUE    {
		$current.merge(this_DEC_VALUE_5);
    }

    { 
    newLeafNode(this_DEC_VALUE_5, grammarAccess.getSigned_Int_ValueAccess().getDEC_VALUETerminalRuleCall_1_2_1()); 
    }
)
    |    this_HEX_VALUE_6=RULE_HEX_VALUE    {
		$current.merge(this_HEX_VALUE_6);
    }

    { 
    newLeafNode(this_HEX_VALUE_6, grammarAccess.getSigned_Int_ValueAccess().getHEX_VALUETerminalRuleCall_1_3()); 
    }
))
    ;





// Entry rule entryRuleReal_Literal
entryRuleReal_Literal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReal_LiteralRule()); }
	 iv_ruleReal_Literal=ruleReal_Literal 
	 { $current=$iv_ruleReal_Literal.current; } 
	 EOF 
;

// Rule Real_Literal
ruleReal_Literal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getReal_LiteralAccess().getValueReal_ValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleReal_Value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReal_LiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Real_Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleReal_Type_Name
entryRuleReal_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReal_Type_NameRule()); } 
	 iv_ruleReal_Type_Name=ruleReal_Type_Name 
	 { $current=$iv_ruleReal_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Real_Type_Name
ruleReal_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='LREAL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReal_Type_NameAccess().getLREALKeyword_0()); 
    }

    |
	kw='REAL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReal_Type_NameAccess().getREALKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleReal_Value
entryRuleReal_Value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReal_ValueRule()); } 
	 iv_ruleReal_Value=ruleReal_Value 
	 { $current=$iv_ruleReal_Value.current.getText(); }  
	 EOF 
;

// Rule Real_Value
ruleReal_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReal_ValueAccess().getReal_Type_NameParserRuleCall_0()); 
    }
    this_Real_Type_Name_0=ruleReal_Type_Name    {
		$current.merge(this_Real_Type_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReal_ValueAccess().getPlusSignKeyword_1_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReal_ValueAccess().getHyphenMinusKeyword_1_1()); 
    }
)?    this_FLOAT_VALUE_3=RULE_FLOAT_VALUE    {
		$current.merge(this_FLOAT_VALUE_3);
    }

    { 
    newLeafNode(this_FLOAT_VALUE_3, grammarAccess.getReal_ValueAccess().getFLOAT_VALUETerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleBit_Str_Literal
entryRuleBit_Str_Literal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBit_Str_LiteralRule()); }
	 iv_ruleBit_Str_Literal=ruleBit_Str_Literal 
	 { $current=$iv_ruleBit_Str_Literal.current; } 
	 EOF 
;

// Rule Bit_Str_Literal
ruleBit_Str_Literal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBit_Str_LiteralAccess().getValueBit_Str_ValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleBit_Str_Value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBit_Str_LiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Bit_Str_Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleMultibits_Type_Name
entryRuleMultibits_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultibits_Type_NameRule()); } 
	 iv_ruleMultibits_Type_Name=ruleMultibits_Type_Name 
	 { $current=$iv_ruleMultibits_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Multibits_Type_Name
ruleMultibits_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='BYTE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultibits_Type_NameAccess().getBYTEKeyword_0()); 
    }

    |
	kw='WORD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultibits_Type_NameAccess().getWORDKeyword_1()); 
    }

    |
	kw='DWORD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultibits_Type_NameAccess().getDWORDKeyword_2()); 
    }

    |
	kw='LWORD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultibits_Type_NameAccess().getLWORDKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleBit_Str_Value
entryRuleBit_Str_Value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBit_Str_ValueRule()); } 
	 iv_ruleBit_Str_Value=ruleBit_Str_Value 
	 { $current=$iv_ruleBit_Str_Value.current.getText(); }  
	 EOF 
;

// Rule Bit_Str_Value
ruleBit_Str_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBit_Str_ValueAccess().getMultibits_Type_NameParserRuleCall_0()); 
    }
    this_Multibits_Type_Name_0=ruleMultibits_Type_Name    {
		$current.merge(this_Multibits_Type_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBit_Str_ValueAccess().getNumberSignKeyword_1()); 
    }
(    this_BIN_VALUE_2=RULE_BIN_VALUE    {
		$current.merge(this_BIN_VALUE_2);
    }

    { 
    newLeafNode(this_BIN_VALUE_2, grammarAccess.getBit_Str_ValueAccess().getBIN_VALUETerminalRuleCall_2_0()); 
    }

    |    this_OCT_VALUE_3=RULE_OCT_VALUE    {
		$current.merge(this_OCT_VALUE_3);
    }

    { 
    newLeafNode(this_OCT_VALUE_3, grammarAccess.getBit_Str_ValueAccess().getOCT_VALUETerminalRuleCall_2_1()); 
    }

    |    this_DEC_VALUE_4=RULE_DEC_VALUE    {
		$current.merge(this_DEC_VALUE_4);
    }

    { 
    newLeafNode(this_DEC_VALUE_4, grammarAccess.getBit_Str_ValueAccess().getDEC_VALUETerminalRuleCall_2_2()); 
    }

    |    this_HEX_VALUE_5=RULE_HEX_VALUE    {
		$current.merge(this_HEX_VALUE_5);
    }

    { 
    newLeafNode(this_HEX_VALUE_5, grammarAccess.getBit_Str_ValueAccess().getHEX_VALUETerminalRuleCall_2_3()); 
    }
))
    ;





// Entry rule entryRuleBool_Literal
entryRuleBool_Literal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBool_LiteralRule()); }
	 iv_ruleBool_Literal=ruleBool_Literal 
	 { $current=$iv_ruleBool_Literal.current; } 
	 EOF 
;

// Rule Bool_Literal
ruleBool_Literal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBool_LiteralAccess().getValueBool_ValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleBool_Value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBool_LiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Bool_Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBool_Value
entryRuleBool_Value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBool_ValueRule()); } 
	 iv_ruleBool_Value=ruleBool_Value 
	 { $current=$iv_ruleBool_Value.current.getText(); }  
	 EOF 
;

// Rule Bool_Value
ruleBool_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getBool_ValueAccess().getBool_Type_NameParserRuleCall_0_0()); 
    }
    this_Bool_Type_Name_0=ruleBool_Type_Name    {
		$current.merge(this_Bool_Type_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBool_ValueAccess().getNumberSignKeyword_0_1()); 
    }
)?(
	kw='0' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBool_ValueAccess().getDigitZeroKeyword_1_0()); 
    }

    |
	kw='1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBool_ValueAccess().getDigitOneKeyword_1_1()); 
    }

    |
	kw='FALSE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBool_ValueAccess().getFALSEKeyword_1_2()); 
    }

    |
	kw='TRUE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBool_ValueAccess().getTRUEKeyword_1_3()); 
    }
))
    ;





// Entry rule entryRuleBool_Type_Name
entryRuleBool_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBool_Type_NameRule()); } 
	 iv_ruleBool_Type_Name=ruleBool_Type_Name 
	 { $current=$iv_ruleBool_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Bool_Type_Name
ruleBool_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='BOOL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBool_Type_NameAccess().getBOOLKeyword()); 
    }

    ;





// Entry rule entryRuleChar_Literal
entryRuleChar_Literal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChar_LiteralRule()); }
	 iv_ruleChar_Literal=ruleChar_Literal 
	 { $current=$iv_ruleChar_Literal.current; } 
	 EOF 
;

// Rule Char_Literal
ruleChar_Literal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getChar_LiteralAccess().getValueChar_ValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleChar_Value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChar_LiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Char_Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleChar_Value
entryRuleChar_Value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getChar_ValueRule()); } 
	 iv_ruleChar_Value=ruleChar_Value 
	 { $current=$iv_ruleChar_Value.current.getText(); }  
	 EOF 
;

// Rule Char_Value
ruleChar_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='STRING#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChar_ValueAccess().getSTRINGKeyword_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getChar_ValueAccess().getChar_StrParserRuleCall_1()); 
    }
    this_Char_Str_1=ruleChar_Str    {
		$current.merge(this_Char_Str_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleChar_Str
entryRuleChar_Str returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getChar_StrRule()); } 
	 iv_ruleChar_Str=ruleChar_Str 
	 { $current=$iv_ruleChar_Str.current.getText(); }  
	 EOF 
;

// Rule Char_Str
ruleChar_Str returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getChar_StrAccess().getS_Byte_Char_StrParserRuleCall_0()); 
    }
    this_S_Byte_Char_Str_0=ruleS_Byte_Char_Str    {
		$current.merge(this_S_Byte_Char_Str_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getChar_StrAccess().getD_Byte_Char_StrParserRuleCall_1()); 
    }
    this_D_Byte_Char_Str_1=ruleD_Byte_Char_Str    {
		$current.merge(this_D_Byte_Char_Str_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleS_Byte_Char_Str
entryRuleS_Byte_Char_Str returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_Byte_Char_StrRule()); } 
	 iv_ruleS_Byte_Char_Str=ruleS_Byte_Char_Str 
	 { $current=$iv_ruleS_Byte_Char_Str.current.getText(); }  
	 EOF 
;

// Rule S_Byte_Char_Str
ruleS_Byte_Char_Str returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='\'' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getS_Byte_Char_StrAccess().getApostropheKeyword_0()); 
    }
(    this_S_BYTE_CHAR_VALUE_1=RULE_S_BYTE_CHAR_VALUE    {
		$current.merge(this_S_BYTE_CHAR_VALUE_1);
    }

    { 
    newLeafNode(this_S_BYTE_CHAR_VALUE_1, grammarAccess.getS_Byte_Char_StrAccess().getS_BYTE_CHAR_VALUETerminalRuleCall_1()); 
    }
)+
	kw='\'' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getS_Byte_Char_StrAccess().getApostropheKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleD_Byte_Char_Str
entryRuleD_Byte_Char_Str returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getD_Byte_Char_StrRule()); } 
	 iv_ruleD_Byte_Char_Str=ruleD_Byte_Char_Str 
	 { $current=$iv_ruleD_Byte_Char_Str.current.getText(); }  
	 EOF 
;

// Rule D_Byte_Char_Str
ruleD_Byte_Char_Str returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getD_Byte_Char_StrAccess().getQuotationMarkKeyword_0()); 
    }
(    this_D_BYTE_CHAR_VALUE_1=RULE_D_BYTE_CHAR_VALUE    {
		$current.merge(this_D_BYTE_CHAR_VALUE_1);
    }

    { 
    newLeafNode(this_D_BYTE_CHAR_VALUE_1, grammarAccess.getD_Byte_Char_StrAccess().getD_BYTE_CHAR_VALUETerminalRuleCall_1()); 
    }
)+
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getD_Byte_Char_StrAccess().getQuotationMarkKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleTime_Type_Name
entryRuleTime_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTime_Type_NameRule()); } 
	 iv_ruleTime_Type_Name=ruleTime_Type_Name 
	 { $current=$iv_ruleTime_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Time_Type_Name
ruleTime_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='TIME' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTime_Type_NameAccess().getTIMEKeyword_0()); 
    }

    |
	kw='LTIME' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTime_Type_NameAccess().getLTIMEKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleTod_Type_Name
entryRuleTod_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTod_Type_NameRule()); } 
	 iv_ruleTod_Type_Name=ruleTod_Type_Name 
	 { $current=$iv_ruleTod_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Tod_Type_Name
ruleTod_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='TIME_OF_DAY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTod_Type_NameAccess().getTIME_OF_DAYKeyword_0()); 
    }

    |
	kw='TOD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTod_Type_NameAccess().getTODKeyword_1()); 
    }

    |
	kw='LTOD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTod_Type_NameAccess().getLTODKeyword_2()); 
    }
)
    ;









// Entry rule entryRuleTime_Literal
entryRuleTime_Literal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTime_LiteralRule()); }
	 iv_ruleTime_Literal=ruleTime_Literal 
	 { $current=$iv_ruleTime_Literal.current; } 
	 EOF 
;

// Rule Time_Literal
ruleTime_Literal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTime_LiteralAccess().getDurationParserRuleCall_0()); 
    }
    this_Duration_0=ruleDuration
    { 
        $current = $this_Duration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTime_LiteralAccess().getTime_Of_DayParserRuleCall_1()); 
    }
    this_Time_Of_Day_1=ruleTime_Of_Day
    { 
        $current = $this_Time_Of_Day_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTime_LiteralAccess().getDateParserRuleCall_2()); 
    }
    this_Date_2=ruleDate
    { 
        $current = $this_Date_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTime_LiteralAccess().getDate_And_TimeParserRuleCall_3()); 
    }
    this_Date_And_Time_3=ruleDate_And_Time
    { 
        $current = $this_Date_And_Time_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDuration
entryRuleDuration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDurationRule()); }
	 iv_ruleDuration=ruleDuration 
	 { $current=$iv_ruleDuration.current; } 
	 EOF 
;

// Rule Duration
ruleDuration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDurationAccess().getValueDuration_ValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleDuration_Value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDurationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Duration_Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDuration_Value
entryRuleDuration_Value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDuration_ValueRule()); } 
	 iv_ruleDuration_Value=ruleDuration_Value 
	 { $current=$iv_ruleDuration_Value.current.getText(); }  
	 EOF 
;

// Rule Duration_Value
ruleDuration_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getDuration_ValueAccess().getTime_Type_NameParserRuleCall_0_0()); 
    }
    this_Time_Type_Name_0=ruleTime_Type_Name    {
		$current.merge(this_Time_Type_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='T' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDuration_ValueAccess().getTKeyword_0_1()); 
    }

    |
	kw='LT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDuration_ValueAccess().getLTKeyword_0_2()); 
    }
)
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDuration_ValueAccess().getNumberSignKeyword_1()); 
    }
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDuration_ValueAccess().getPlusSignKeyword_2_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDuration_ValueAccess().getHyphenMinusKeyword_2_1()); 
    }
)?    this_INTERVAL_6=RULE_INTERVAL    {
		$current.merge(this_INTERVAL_6);
    }

    { 
    newLeafNode(this_INTERVAL_6, grammarAccess.getDuration_ValueAccess().getINTERVALTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleTime_Of_Day
entryRuleTime_Of_Day returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTime_Of_DayRule()); }
	 iv_ruleTime_Of_Day=ruleTime_Of_Day 
	 { $current=$iv_ruleTime_Of_Day.current; } 
	 EOF 
;

// Rule Time_Of_Day
ruleTime_Of_Day returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTime_Of_DayAccess().getValueTime_Of_Day_ValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleTime_Of_Day_Value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTime_Of_DayRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Time_Of_Day_Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTime_Of_Day_Value
entryRuleTime_Of_Day_Value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTime_Of_Day_ValueRule()); } 
	 iv_ruleTime_Of_Day_Value=ruleTime_Of_Day_Value 
	 { $current=$iv_ruleTime_Of_Day_Value.current.getText(); }  
	 EOF 
;

// Rule Time_Of_Day_Value
ruleTime_Of_Day_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getTime_Of_Day_ValueAccess().getTod_Type_NameParserRuleCall_0_0()); 
    }
    this_Tod_Type_Name_0=ruleTod_Type_Name    {
		$current.merge(this_Tod_Type_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='LTIME_OF_DAY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTime_Of_Day_ValueAccess().getLTIME_OF_DAYKeyword_0_1()); 
    }
)
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTime_Of_Day_ValueAccess().getNumberSignKeyword_1()); 
    }
    this_DAYTIME_VALUE_3=RULE_DAYTIME_VALUE    {
		$current.merge(this_DAYTIME_VALUE_3);
    }

    { 
    newLeafNode(this_DAYTIME_VALUE_3, grammarAccess.getTime_Of_Day_ValueAccess().getDAYTIME_VALUETerminalRuleCall_2()); 
    }
)
    ;







// Entry rule entryRuleDate
entryRuleDate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	 iv_ruleDate=ruleDate 
	 { $current=$iv_ruleDate.current; } 
	 EOF 
;

// Rule Date
ruleDate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_DATE_VALUE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDateAccess().getValueDATE_VALUETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DATE_VALUE");
	    }

)
)
;





// Entry rule entryRuleDate_And_Time
entryRuleDate_And_Time returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDate_And_TimeRule()); }
	 iv_ruleDate_And_Time=ruleDate_And_Time 
	 { $current=$iv_ruleDate_And_Time.current; } 
	 EOF 
;

// Rule Date_And_Time
ruleDate_And_Time returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDate_And_TimeAccess().getValueDate_And_Time_ValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleDate_And_Time_Value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDate_And_TimeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Date_And_Time_Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDate_And_Time_Value
entryRuleDate_And_Time_Value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDate_And_Time_ValueRule()); } 
	 iv_ruleDate_And_Time_Value=ruleDate_And_Time_Value 
	 { $current=$iv_ruleDate_And_Time_Value.current.getText(); }  
	 EOF 
;

// Rule Date_And_Time_Value
ruleDate_And_Time_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='DATE_AND_TIME' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDate_And_Time_ValueAccess().getDATE_AND_TIMEKeyword_0_0()); 
    }

    |
	kw='LDATE_AND_TIME' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDate_And_Time_ValueAccess().getLDATE_AND_TIMEKeyword_0_1()); 
    }

    |
	kw='DT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDate_And_Time_ValueAccess().getDTKeyword_0_2()); 
    }

    |
	kw='LDT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDate_And_Time_ValueAccess().getLDTKeyword_0_3()); 
    }
)
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDate_And_Time_ValueAccess().getNumberSignKeyword_1()); 
    }
    this_DATE_LITERAL_5=RULE_DATE_LITERAL    {
		$current.merge(this_DATE_LITERAL_5);
    }

    { 
    newLeafNode(this_DATE_LITERAL_5, grammarAccess.getDate_And_Time_ValueAccess().getDATE_LITERALTerminalRuleCall_2()); 
    }

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDate_And_Time_ValueAccess().getHyphenMinusKeyword_3()); 
    }
    this_DAYTIME_VALUE_7=RULE_DAYTIME_VALUE    {
		$current.merge(this_DAYTIME_VALUE_7);
    }

    { 
    newLeafNode(this_DAYTIME_VALUE_7, grammarAccess.getDate_And_Time_ValueAccess().getDAYTIME_VALUETerminalRuleCall_4()); 
    }
)
    ;





fragment RULE_LETTER : ('A'..'Z'|'a'..'z'|'_');

fragment RULE_BIT : '0'..'1';

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_DIGIT : '0'..'9';

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F');

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_DIGIT)*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* '\r'? '\n';

RULE_ML_COMMENT_1 : '(*' ( options {greedy=false;} : . )*'*)';

RULE_ML_COMMENT_2 : '/*' ( options {greedy=false;} : . )*'*/';

fragment RULE_WS : (' '|'\t'|'\r'|'\n');

fragment RULE_EOL : '\n';

RULE_PRAGMA : '{' ( options {greedy=false;} : . )*'}';

RULE_BIN_VALUE : '2#' ('_'? RULE_BIT)+;

RULE_OCT_VALUE : '8#' ('_'? RULE_OCTAL_DIGIT)+;

RULE_HEX_VALUE : '16#' ('_'? RULE_HEX_DIGIT)+;

RULE_DEC_VALUE : RULE_DIGIT (RULE_DIGIT|'_' RULE_DIGIT)*;

fragment RULE_FIX_POINT : RULE_DEC_VALUE '.' RULE_DEC_VALUE;

RULE_FLOAT_VALUE : RULE_FIX_POINT (('E'|'e') ('+'|'-')? RULE_DEC_VALUE)?;

RULE_S_BYTE_CHAR_VALUE : (RULE_COMMON_CHAR_VALUE|'$\''|'"'|'$' RULE_HEX_DIGIT RULE_HEX_DIGIT);

RULE_D_BYTE_CHAR_VALUE : (RULE_COMMON_CHAR_VALUE|'\''|'$"'|'$' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT);

fragment RULE_COMMON_CHAR_VALUE : (' '|'!'|'#'|'%'|'&'|'('..'/'|'0'..'9'|':'..'@'|'A'..'Z'|'['..'`'|'a'..'z'|'{'..'~'|'$$'|'$L'|'$N'|'$P'|'$R'|'$T');

RULE_INTERVAL : RULE_DAYS? RULE_HOURS? RULE_MINUTES? RULE_SECONDS? RULE_MILLISECONDS? RULE_MICROSECONDS? RULE_NANOSECONDS?;

fragment RULE_DAYS : (RULE_FIX_POINT ('d'|'D')|RULE_DEC_VALUE ('d'|'D') '_'?);

fragment RULE_HOURS : (RULE_FIX_POINT ('h'|'H')|RULE_DEC_VALUE ('h'|'H') '_'?);

fragment RULE_MINUTES : (RULE_FIX_POINT ('m'|'M')|RULE_DEC_VALUE ('m'|'M') '_'?);

fragment RULE_SECONDS : (RULE_FIX_POINT ('s'|'S')|RULE_DEC_VALUE ('s'|'S') '_'?);

fragment RULE_MILLISECONDS : (RULE_FIX_POINT ('ms'|'Ms'|'mS'|'MS')|RULE_DEC_VALUE ('ms'|'Ms'|'mS'|'MS') '_'?);

fragment RULE_MICROSECONDS : (RULE_FIX_POINT ('u'|'U') ('s'|'S')|RULE_DEC_VALUE ('u'|'U') ('s'|'S') '_'?);

fragment RULE_NANOSECONDS : (RULE_FIX_POINT ('n'|'N') ('s'|'S')|RULE_DEC_VALUE ('n'|'N') ('s'|'S'));

RULE_DAYTIME_VALUE : RULE_DEC_VALUE ':' RULE_DEC_VALUE ':' RULE_FIX_POINT;

RULE_DATE_VALUE : ('DATE'|'LDATE'|'D'|'LD') '#' RULE_DATE_LITERAL;

RULE_DATE_LITERAL : RULE_DEC_VALUE '-' RULE_DEC_VALUE '-' RULE_DEC_VALUE;


