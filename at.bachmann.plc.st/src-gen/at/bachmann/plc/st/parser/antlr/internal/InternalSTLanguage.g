/*
* generated by Xtext
*/
grammar InternalSTLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.bachmann.plc.st.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bachmann.plc.st.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bachmann.plc.st.services.STLanguageGrammarAccess;

}

@parser::members {

 	private STLanguageGrammarAccess grammarAccess;
 	
    public InternalSTLanguageParser(TokenStream input, STLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "test";	
   	}
   	
   	@Override
   	protected STLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuletest
entryRuletest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	 iv_ruletest=ruletest 
	 { $current=$iv_ruletest.current; } 
	 EOF 
;

// Rule test
ruletest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_test_0_0=	's' 
    {
        newLeafNode(lv_test_0_0, grammarAccess.getTestAccess().getTestSKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRule());
	        }
       		setWithLastConsumed($current, "test", lv_test_0_0, "s");
	    }

)
)
;







// Entry rule entryRuleTIME_LITERAL
entryRuleTIME_LITERAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTIME_LITERALRule()); } 
	 iv_ruleTIME_LITERAL=ruleTIME_LITERAL 
	 { $current=$iv_ruleTIME_LITERAL.current.getText(); }  
	 EOF 
;

// Rule TIME_LITERAL
ruleTIME_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTIME_LITERALAccess().getDURATIONParserRuleCall_0()); 
    }
    this_DURATION_0=ruleDURATION    {
		$current.merge(this_DURATION_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_TIME_OF_DAY_1=RULE_TIME_OF_DAY    {
		$current.merge(this_TIME_OF_DAY_1);
    }

    { 
    newLeafNode(this_TIME_OF_DAY_1, grammarAccess.getTIME_LITERALAccess().getTIME_OF_DAYTerminalRuleCall_1()); 
    }

    |    this_DATE_2=RULE_DATE    {
		$current.merge(this_DATE_2);
    }

    { 
    newLeafNode(this_DATE_2, grammarAccess.getTIME_LITERALAccess().getDATETerminalRuleCall_2()); 
    }

    |    this_DATE_AND_TIME_3=RULE_DATE_AND_TIME    {
		$current.merge(this_DATE_AND_TIME_3);
    }

    { 
    newLeafNode(this_DATE_AND_TIME_3, grammarAccess.getTIME_LITERALAccess().getDATE_AND_TIMETerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleDURATION
entryRuleDURATION returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDURATIONRule()); } 
	 iv_ruleDURATION=ruleDURATION 
	 { $current=$iv_ruleDURATION.current.getText(); }  
	 EOF 
;

// Rule DURATION
ruleDURATION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_TIME_TYPE_NAME_0=RULE_TIME_TYPE_NAME    {
		$current.merge(this_TIME_TYPE_NAME_0);
    }

    { 
    newLeafNode(this_TIME_TYPE_NAME_0, grammarAccess.getDURATIONAccess().getTIME_TYPE_NAMETerminalRuleCall_0_0()); 
    }

    |
	kw='T' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDURATIONAccess().getTKeyword_0_1()); 
    }

    |
	kw='LT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDURATIONAccess().getLTKeyword_0_2()); 
    }
)
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDURATIONAccess().getNumberSignKeyword_1()); 
    }
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDURATIONAccess().getPlusSignKeyword_2_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDURATIONAccess().getHyphenMinusKeyword_2_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getDURATIONAccess().getINTERVALParserRuleCall_3()); 
    }
    this_INTERVAL_6=ruleINTERVAL    {
		$current.merge(this_INTERVAL_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleINTERVAL
entryRuleINTERVAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTERVALRule()); } 
	 iv_ruleINTERVAL=ruleINTERVAL 
	 { $current=$iv_ruleINTERVAL.current.getText(); }  
	 EOF 
;

// Rule INTERVAL
ruleINTERVAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_DAYS_0=RULE_DAYS    {
		$current.merge(this_DAYS_0);
    }

    { 
    newLeafNode(this_DAYS_0, grammarAccess.getINTERVALAccess().getDAYSTerminalRuleCall_0()); 
    }

    |    this_HOURS_1=RULE_HOURS    {
		$current.merge(this_HOURS_1);
    }

    { 
    newLeafNode(this_HOURS_1, grammarAccess.getINTERVALAccess().getHOURSTerminalRuleCall_1()); 
    }

    |    this_MINUTES_2=RULE_MINUTES    {
		$current.merge(this_MINUTES_2);
    }

    { 
    newLeafNode(this_MINUTES_2, grammarAccess.getINTERVALAccess().getMINUTESTerminalRuleCall_2()); 
    }

    |    this_SECONDS_3=RULE_SECONDS    {
		$current.merge(this_SECONDS_3);
    }

    { 
    newLeafNode(this_SECONDS_3, grammarAccess.getINTERVALAccess().getSECONDSTerminalRuleCall_3()); 
    }

    |    this_MILLISECONDS_4=RULE_MILLISECONDS    {
		$current.merge(this_MILLISECONDS_4);
    }

    { 
    newLeafNode(this_MILLISECONDS_4, grammarAccess.getINTERVALAccess().getMILLISECONDSTerminalRuleCall_4()); 
    }

    |    this_MICROSECONDS_5=RULE_MICROSECONDS    {
		$current.merge(this_MICROSECONDS_5);
    }

    { 
    newLeafNode(this_MICROSECONDS_5, grammarAccess.getINTERVALAccess().getMICROSECONDSTerminalRuleCall_5()); 
    }

    |    this_NANOSECONDS_6=RULE_NANOSECONDS    {
		$current.merge(this_NANOSECONDS_6);
    }

    { 
    newLeafNode(this_NANOSECONDS_6, grammarAccess.getINTERVALAccess().getNANOSECONDSTerminalRuleCall_6()); 
    }
)
    ;









// Entry rule entryRuleSimple_Type_Access
entryRuleSimple_Type_Access returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_Type_AccessRule()); } 
	 iv_ruleSimple_Type_Access=ruleSimple_Type_Access 
	 { $current=$iv_ruleSimple_Type_Access.current.getText(); }  
	 EOF 
;

// Rule Simple_Type_Access
ruleSimple_Type_Access returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getSimple_Type_AccessAccess().getNamespace_NameParserRuleCall_0_0()); 
    }
    this_Namespace_Name_0=ruleNamespace_Name    {
		$current.merge(this_Namespace_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_DOT_1=RULE_DOT    {
		$current.merge(this_DOT_1);
    }

    { 
    newLeafNode(this_DOT_1, grammarAccess.getSimple_Type_AccessAccess().getDOTTerminalRuleCall_0_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getSimple_Type_AccessAccess().getSimple_Type_NameParserRuleCall_1()); 
    }
    this_Simple_Type_Name_2=ruleSimple_Type_Name    {
		$current.merge(this_Simple_Type_Name_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSubrange_Type_Access
entryRuleSubrange_Type_Access returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubrange_Type_AccessRule()); } 
	 iv_ruleSubrange_Type_Access=ruleSubrange_Type_Access 
	 { $current=$iv_ruleSubrange_Type_Access.current.getText(); }  
	 EOF 
;

// Rule Subrange_Type_Access
ruleSubrange_Type_Access returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getSubrange_Type_AccessAccess().getNamespace_NameParserRuleCall_0_0()); 
    }
    this_Namespace_Name_0=ruleNamespace_Name    {
		$current.merge(this_Namespace_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_DOT_1=RULE_DOT    {
		$current.merge(this_DOT_1);
    }

    { 
    newLeafNode(this_DOT_1, grammarAccess.getSubrange_Type_AccessAccess().getDOTTerminalRuleCall_0_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getSubrange_Type_AccessAccess().getSubrange_Type_NameParserRuleCall_1()); 
    }
    this_Subrange_Type_Name_2=ruleSubrange_Type_Name    {
		$current.merge(this_Subrange_Type_Name_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleEnum_Type_Access
entryRuleEnum_Type_Access returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnum_Type_AccessRule()); } 
	 iv_ruleEnum_Type_Access=ruleEnum_Type_Access 
	 { $current=$iv_ruleEnum_Type_Access.current.getText(); }  
	 EOF 
;

// Rule Enum_Type_Access
ruleEnum_Type_Access returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getEnum_Type_AccessAccess().getNamespace_NameParserRuleCall_0_0()); 
    }
    this_Namespace_Name_0=ruleNamespace_Name    {
		$current.merge(this_Namespace_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_DOT_1=RULE_DOT    {
		$current.merge(this_DOT_1);
    }

    { 
    newLeafNode(this_DOT_1, grammarAccess.getEnum_Type_AccessAccess().getDOTTerminalRuleCall_0_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getEnum_Type_AccessAccess().getEnum_Type_NameParserRuleCall_1()); 
    }
    this_Enum_Type_Name_2=ruleEnum_Type_Name    {
		$current.merge(this_Enum_Type_Name_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;









// Entry rule entryRuleSimple_Type_Name
entryRuleSimple_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_Type_NameRule()); } 
	 iv_ruleSimple_Type_Name=ruleSimple_Type_Name 
	 { $current=$iv_ruleSimple_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Simple_Type_Name
ruleSimple_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getSimple_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleSubrange_Type_Name
entryRuleSubrange_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubrange_Type_NameRule()); } 
	 iv_ruleSubrange_Type_Name=ruleSubrange_Type_Name 
	 { $current=$iv_ruleSubrange_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Subrange_Type_Name
ruleSubrange_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getSubrange_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleEnum_Type_Name
entryRuleEnum_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnum_Type_NameRule()); } 
	 iv_ruleEnum_Type_Name=ruleEnum_Type_Name 
	 { $current=$iv_ruleEnum_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Enum_Type_Name
ruleEnum_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getEnum_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleArray_Type_Name
entryRuleArray_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArray_Type_NameRule()); } 
	 iv_ruleArray_Type_Name=ruleArray_Type_Name 
	 { $current=$iv_ruleArray_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Array_Type_Name
ruleArray_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getArray_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleStruct_Type_Name
entryRuleStruct_Type_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStruct_Type_NameRule()); } 
	 iv_ruleStruct_Type_Name=ruleStruct_Type_Name 
	 { $current=$iv_ruleStruct_Type_Name.current.getText(); }  
	 EOF 
;

// Rule Struct_Type_Name
ruleStruct_Type_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getStruct_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleNamespace_Name
entryRuleNamespace_Name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespace_NameRule()); } 
	 iv_ruleNamespace_Name=ruleNamespace_Name 
	 { $current=$iv_ruleNamespace_Name.current.getText(); }  
	 EOF 
;

// Rule Namespace_Name
ruleNamespace_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getNamespace_NameAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





fragment RULE_UNDERSCORE : '_';

fragment RULE_LETTER : ('A'..'Z'|'_');

fragment RULE_DIGIT : '0'..'9';

fragment RULE_BIT : '0'..'1';

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F');

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_DIGIT)*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* '\r'? '\n';

RULE_ML_COMMENT_1 : '(*' ( options {greedy=false;} : . )*'*)';

RULE_ML_COMMENT_2 : '/*' ( options {greedy=false;} : . )*'*/';

RULE_COMMENT : (RULE_SL_COMMENT|RULE_ML_COMMENT_1|RULE_ML_COMMENT_2);

RULE_WS : (' '|'\t'|'\r'|'\n');

RULE_EOL : '\n';

RULE_PRAGMA : '{' ( options {greedy=false;} : . )*'}';

RULE_NUMERIC_LITERAL : (RULE_INT_LITERAL|RULE_REAL_LITERAL);

RULE_INT_LITERAL : ((RULE_INT_TYPE_NAME '#')? RULE_SIGNED_INT|RULE_BINARY_INT|RULE_OCTAL_INT|RULE_HEX_INT);

RULE_UNSIGNED_INT : RULE_DIGIT (RULE_UNDERSCORE? RULE_DIGIT)*;

RULE_SIGNED_INT : ('+'|'-')? RULE_UNSIGNED_INT;

RULE_BINARY_INT : '2#' (RULE_UNDERSCORE? RULE_BIT)+;

RULE_OCTAL_INT : '8#' (RULE_UNDERSCORE? RULE_OCTAL_DIGIT)+;

RULE_HEX_INT : '16#' (RULE_UNDERSCORE? RULE_HEX_DIGIT)+;

RULE_REAL_LITERAL : (RULE_REAL_TYPE_NAME '#')? RULE_SIGNED_INT RULE_DOT RULE_UNSIGNED_INT ('E' RULE_SIGNED_INT)?;

RULE_BIT_STR_LITERAL : ((RULE_MULTIBITS_TYPE_NAME '#')? RULE_UNSIGNED_INT|RULE_BINARY_INT|RULE_OCTAL_INT|RULE_HEX_INT);

RULE_BOOL_LITERAL : ((RULE_BOOL_TYPE_NAME '#')? RULE_BIT|'FALSE'|'TRUE');

RULE_CHAR_LITERAL : 'STRING#'? RULE_CHAR_STR;

RULE_CHAR_STR : (RULE_S_BYTE_CHAR_STR|RULE_D_BYTE_CHAR_STR);

RULE_S_BYTE_CHAR_STR : '\'' RULE_S_BYTE_CHAR_VALUE+ '\'';

RULE_D_BYTE_CHAR_STR : '"' RULE_D_BYTE_CHAR_VALUE+ '"';

RULE_S_BYTE_CHAR_VALUE : (RULE_COMMON_CHAR_VALUE|'$\''|'"'|'$' RULE_HEX_DIGIT RULE_HEX_DIGIT);

RULE_D_BYTE_CHAR_VALUE : (RULE_COMMON_CHAR_VALUE|'\''|'$"'|'$' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT);

fragment RULE_COMMON_CHAR_VALUE : (' '|'!'|'#'|'%'|'&'|'('..'/'|'0'..'9'|':'..'@'|'A'..'Z'|'['..'`'|'a'..'z'|'{'..'~'|'$$'|'$L'|'$N'|'$P'|'$R'|'$T');

RULE_ASSIGNMENT : ':=';

RULE_DOT : '.';

RULE_FIX_POINT : RULE_UNSIGNED_INT (RULE_DOT RULE_UNSIGNED_INT)?;

RULE_DAYS : (RULE_DAY_UNSIGNED|RULE_DAY_FLOAT);

RULE_DAY_FLOAT : RULE_FIX_POINT 'd';

RULE_DAY_UNSIGNED : (RULE_UNSIGNED_INT 'd' RULE_UNDERSCORE?)? RULE_HOURS?;

RULE_HOURS : (RULE_HOUR_UNSIGNED|RULE_HOUR_FLOAT);

RULE_HOUR_FLOAT : RULE_FIX_POINT 'h';

RULE_HOUR_UNSIGNED : (RULE_UNSIGNED_INT 'h' RULE_UNDERSCORE?)? RULE_MINUTES?;

RULE_MINUTES : (RULE_MINUTE_UNSIGNED|RULE_MINUTE_FLOAT);

RULE_MINUTE_FLOAT : RULE_FIX_POINT 'm';

RULE_MINUTE_UNSIGNED : (RULE_UNSIGNED_INT 'm' RULE_UNDERSCORE?)? RULE_SECONDS?;

RULE_SECONDS : (RULE_SECOND_UNSIGNED|RULE_SECOND_FLOAT);

RULE_SECOND_FLOAT : RULE_FIX_POINT 's';

RULE_SECOND_UNSIGNED : (RULE_UNSIGNED_INT 's' RULE_UNDERSCORE?)? RULE_MILLISECONDS?;

RULE_MILLISECONDS : (RULE_MILLISECOND_UNSIGNED|RULE_MILLISECOND_FLOAT);

RULE_MILLISECOND_FLOAT : RULE_FIX_POINT 'ms';

RULE_MILLISECOND_UNSIGNED : (RULE_UNSIGNED_INT 'ms' RULE_UNDERSCORE?)? RULE_MICROSECONDS?;

RULE_MICROSECONDS : (RULE_MICROSECOND_UNSIGNED|RULE_MICROSECOND_FLOAT);

RULE_MICROSECOND_FLOAT : RULE_FIX_POINT 'us';

RULE_MICROSECOND_UNSIGNED : (RULE_UNSIGNED_INT 'us' RULE_UNDERSCORE?)? RULE_NANOSECONDS?;

RULE_NANOSECONDS : RULE_FIX_POINT 'ns';

RULE_TIME_OF_DAY : (RULE_TOD_TYPE_NAME|'LTIME_OF_DAY') '#' RULE_DAYTIME;

RULE_DAYTIME : RULE_DAY_HOUR ':' RULE_DAY_MINUTE ':' RULE_DAY_SECOND;

RULE_DAY_HOUR : RULE_UNSIGNED_INT;

RULE_DAY_MINUTE : RULE_UNSIGNED_INT;

RULE_DAY_SECOND : RULE_FIX_POINT;

RULE_DATE : (RULE_DATE_TYPE_NAME|'D'|'LD') '#' RULE_DATE_LITERAL;

RULE_DATE_LITERAL : RULE_YEAR '-' RULE_MONTH '-' RULE_DAY;

RULE_YEAR : RULE_UNSIGNED_INT;

RULE_MONTH : RULE_UNSIGNED_INT;

RULE_DAY : RULE_UNSIGNED_INT;

RULE_DATE_AND_TIME : (RULE_DT_TYPE_NAME|'LDATE_AND_TIME') '#' RULE_DATE_LITERAL '-' RULE_DAYTIME;

RULE_ELEM_TYPE_NAME : (RULE_NUMERIC_TYPE_NAME|RULE_BIT_STR_TYPE_NAME|RULE_STRING_TYPE_NAME|RULE_DATE_TYPE_NAME|RULE_TIME_TYPE_NAME);

RULE_NUMERIC_TYPE_NAME : (RULE_INT_TYPE_NAME|RULE_REAL_TYPE_NAME);

RULE_INT_TYPE_NAME : (RULE_SIGN_INT_TYPE_NAME|RULE_UNSIGN_INT_TYPE_NAME);

RULE_SIGN_INT_TYPE_NAME : ('SINT'|'INT'|'DINT'|'LINT');

RULE_UNSIGN_INT_TYPE_NAME : ('USINT'|'UINT'|'UDINT'|'ULINT');

RULE_REAL_TYPE_NAME : ('REAL'|'LREAL');

RULE_STRING_TYPE_NAME : ('STRING' ('[' RULE_UNSIGNED_INT ']')?|'WSTRING' ('[' RULE_UNSIGNED_INT ']')?|'CHAR'|'WCHAR');

RULE_TIME_TYPE_NAME : ('TIME'|'LTIME');

RULE_DATE_TYPE_NAME : ('DATE'|'LDATE');

RULE_TOD_TYPE_NAME : ('TIME_OF_DAY'|'TOD'|'LTOD');

RULE_DT_TYPE_NAME : ('DATE_AND_TIME'|'DT'|'LDT');

RULE_BIT_STR_TYPE_NAME : (RULE_BOOL_TYPE_NAME|RULE_MULTIBITS_TYPE_NAME);

RULE_BOOL_TYPE_NAME : 'BOOL';

RULE_MULTIBITS_TYPE_NAME : ('BYTE'|'WORD'|'DWORD'|'LWORD');


