/*
* generated by Xtext
*/
package at.bachmann.plc.st.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.bachmann.plc.st.services.STLanguageGrammarAccess;

public class STLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private STLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser createParser() {
		at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser result = new at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
					put(grammarAccess.getNumeric_LiteralAccess().getAlternatives(), "rule__Numeric_Literal__Alternatives");
					put(grammarAccess.getInt_LiteralAccess().getAlternatives(), "rule__Int_Literal__Alternatives");
					put(grammarAccess.getInt_Type_NameAccess().getAlternatives(), "rule__Int_Type_Name__Alternatives");
					put(grammarAccess.getUnsigned_Int_Type_NameAccess().getAlternatives(), "rule__Unsigned_Int_Type_Name__Alternatives");
					put(grammarAccess.getSigned_Int_Type_NameAccess().getAlternatives(), "rule__Signed_Int_Type_Name__Alternatives");
					put(grammarAccess.getUnsigned_Int_ValueAccess().getAlternatives_1(), "rule__Unsigned_Int_Value__Alternatives_1");
					put(grammarAccess.getSigned_Int_ValueAccess().getAlternatives_1(), "rule__Signed_Int_Value__Alternatives_1");
					put(grammarAccess.getSigned_Int_ValueAccess().getAlternatives_1_2_0(), "rule__Signed_Int_Value__Alternatives_1_2_0");
					put(grammarAccess.getReal_Type_NameAccess().getAlternatives(), "rule__Real_Type_Name__Alternatives");
					put(grammarAccess.getReal_ValueAccess().getAlternatives_1(), "rule__Real_Value__Alternatives_1");
					put(grammarAccess.getMultibits_Type_NameAccess().getAlternatives(), "rule__Multibits_Type_Name__Alternatives");
					put(grammarAccess.getBit_Str_ValueAccess().getAlternatives_2(), "rule__Bit_Str_Value__Alternatives_2");
					put(grammarAccess.getBool_ValueAccess().getAlternatives_1(), "rule__Bool_Value__Alternatives_1");
					put(grammarAccess.getChar_StrAccess().getAlternatives(), "rule__Char_Str__Alternatives");
					put(grammarAccess.getTime_Type_NameAccess().getAlternatives(), "rule__Time_Type_Name__Alternatives");
					put(grammarAccess.getTod_Type_NameAccess().getAlternatives(), "rule__Tod_Type_Name__Alternatives");
					put(grammarAccess.getDate_Type_NameAccess().getAlternatives(), "rule__Date_Type_Name__Alternatives");
					put(grammarAccess.getDt_Type_NameAccess().getAlternatives(), "rule__Dt_Type_Name__Alternatives");
					put(grammarAccess.getTime_LiteralAccess().getAlternatives(), "rule__Time_Literal__Alternatives");
					put(grammarAccess.getDuration_ValueAccess().getAlternatives_0(), "rule__Duration_Value__Alternatives_0");
					put(grammarAccess.getDuration_ValueAccess().getAlternatives_2(), "rule__Duration_Value__Alternatives_2");
					put(grammarAccess.getTime_Of_Day_ValueAccess().getAlternatives_0(), "rule__Time_Of_Day_Value__Alternatives_0");
					put(grammarAccess.getDate_And_Time_ValueAccess().getAlternatives_0(), "rule__Date_And_Time_Value__Alternatives_0");
					put(grammarAccess.getUnsigned_Int_ValueAccess().getGroup(), "rule__Unsigned_Int_Value__Group__0");
					put(grammarAccess.getSigned_Int_ValueAccess().getGroup(), "rule__Signed_Int_Value__Group__0");
					put(grammarAccess.getSigned_Int_ValueAccess().getGroup_1_2(), "rule__Signed_Int_Value__Group_1_2__0");
					put(grammarAccess.getReal_ValueAccess().getGroup(), "rule__Real_Value__Group__0");
					put(grammarAccess.getBit_Str_ValueAccess().getGroup(), "rule__Bit_Str_Value__Group__0");
					put(grammarAccess.getBool_ValueAccess().getGroup(), "rule__Bool_Value__Group__0");
					put(grammarAccess.getBool_ValueAccess().getGroup_0(), "rule__Bool_Value__Group_0__0");
					put(grammarAccess.getChar_ValueAccess().getGroup(), "rule__Char_Value__Group__0");
					put(grammarAccess.getS_Byte_Char_StrAccess().getGroup(), "rule__S_Byte_Char_Str__Group__0");
					put(grammarAccess.getD_Byte_Char_StrAccess().getGroup(), "rule__D_Byte_Char_Str__Group__0");
					put(grammarAccess.getDuration_ValueAccess().getGroup(), "rule__Duration_Value__Group__0");
					put(grammarAccess.getTime_Of_Day_ValueAccess().getGroup(), "rule__Time_Of_Day_Value__Group__0");
					put(grammarAccess.getDate_And_Time_ValueAccess().getGroup(), "rule__Date_And_Time_Value__Group__0");
					put(grammarAccess.getTestAccess().getTestAssignment(), "rule__Test__TestAssignment");
					put(grammarAccess.getUnsigned_IntAccess().getValueAssignment(), "rule__Unsigned_Int__ValueAssignment");
					put(grammarAccess.getSigned_IntAccess().getValueAssignment(), "rule__Signed_Int__ValueAssignment");
					put(grammarAccess.getReal_LiteralAccess().getValueAssignment(), "rule__Real_Literal__ValueAssignment");
					put(grammarAccess.getBit_Str_LiteralAccess().getValueAssignment(), "rule__Bit_Str_Literal__ValueAssignment");
					put(grammarAccess.getBool_LiteralAccess().getValueAssignment(), "rule__Bool_Literal__ValueAssignment");
					put(grammarAccess.getChar_LiteralAccess().getValueAssignment(), "rule__Char_Literal__ValueAssignment");
					put(grammarAccess.getDurationAccess().getValueAssignment(), "rule__Duration__ValueAssignment");
					put(grammarAccess.getTime_Of_DayAccess().getValueAssignment(), "rule__Time_Of_Day__ValueAssignment");
					put(grammarAccess.getDaytimeAccess().getValueAssignment(), "rule__Daytime__ValueAssignment");
					put(grammarAccess.getDateAccess().getValueAssignment(), "rule__Date__ValueAssignment");
					put(grammarAccess.getDate_And_TimeAccess().getValueAssignment(), "rule__Date_And_Time__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser typedParser = (at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser) parser;
			typedParser.entryRuletest();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_SL_COMMENT", "RULE_ML_COMMENT_1", "RULE_ML_COMMENT_2", "RULE_PRAGMA" };
	}
	
	public STLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(STLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
