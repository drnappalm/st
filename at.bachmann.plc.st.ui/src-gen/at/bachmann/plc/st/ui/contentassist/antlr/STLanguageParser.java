/*
* generated by Xtext
*/
package at.bachmann.plc.st.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.bachmann.plc.st.services.STLanguageGrammarAccess;

public class STLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private STLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser createParser() {
		at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser result = new at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCONSTANTAccess().getAlternatives(), "rule__CONSTANT__Alternatives");
					put(grammarAccess.getTIME_LITERALAccess().getAlternatives(), "rule__TIME_LITERAL__Alternatives");
					put(grammarAccess.getDURATIONAccess().getAlternatives_0(), "rule__DURATION__Alternatives_0");
					put(grammarAccess.getDURATIONAccess().getAlternatives_2(), "rule__DURATION__Alternatives_2");
					put(grammarAccess.getINTERVALAccess().getAlternatives(), "rule__INTERVAL__Alternatives");
					put(grammarAccess.getSingle_Elem_Type_AccessAccess().getAlternatives(), "rule__Single_Elem_Type_Access__Alternatives");
					put(grammarAccess.getDURATIONAccess().getGroup(), "rule__DURATION__Group__0");
					put(grammarAccess.getString_Type_AccessAccess().getGroup(), "rule__String_Type_Access__Group__0");
					put(grammarAccess.getString_Type_AccessAccess().getGroup_0(), "rule__String_Type_Access__Group_0__0");
					put(grammarAccess.getSimple_Type_AccessAccess().getGroup(), "rule__Simple_Type_Access__Group__0");
					put(grammarAccess.getSimple_Type_AccessAccess().getGroup_0(), "rule__Simple_Type_Access__Group_0__0");
					put(grammarAccess.getSubrange_Type_AccessAccess().getGroup(), "rule__Subrange_Type_Access__Group__0");
					put(grammarAccess.getSubrange_Type_AccessAccess().getGroup_0(), "rule__Subrange_Type_Access__Group_0__0");
					put(grammarAccess.getEnum_Type_AccessAccess().getGroup(), "rule__Enum_Type_Access__Group__0");
					put(grammarAccess.getEnum_Type_AccessAccess().getGroup_0(), "rule__Enum_Type_Access__Group_0__0");
					put(grammarAccess.getArray_Type_AccessAccess().getGroup(), "rule__Array_Type_Access__Group__0");
					put(grammarAccess.getArray_Type_AccessAccess().getGroup_0(), "rule__Array_Type_Access__Group_0__0");
					put(grammarAccess.getStruct_Type_AccessAccess().getGroup(), "rule__Struct_Type_Access__Group__0");
					put(grammarAccess.getStruct_Type_AccessAccess().getGroup_0(), "rule__Struct_Type_Access__Group_0__0");
					put(grammarAccess.getTestAccess().getTestAssignment(), "rule__Test__TestAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser typedParser = (at.bachmann.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser) parser;
			typedParser.entryRuletest();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_COMMENT", "RULE_WS", "RULE_PRAGMA" };
	}
	
	public STLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(STLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
