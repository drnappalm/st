/*
* generated by Xtext
*/
grammar InternalSTLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package at.bachmann.plc.st.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.bachmann.plc.st.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.bachmann.plc.st.services.STLanguageGrammarAccess;

}

@parser::members {
 
 	private STLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(STLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuletest
entryRuletest 
:
{ before(grammarAccess.getTestRule()); }
	 ruletest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule test
ruletest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestAccess().getTestAssignment()); }
(rule__Test__TestAssignment)
{ after(grammarAccess.getTestAccess().getTestAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTIME_LITERAL
entryRuleTIME_LITERAL 
:
{ before(grammarAccess.getTIME_LITERALRule()); }
	 ruleTIME_LITERAL
{ after(grammarAccess.getTIME_LITERALRule()); } 
	 EOF 
;

// Rule TIME_LITERAL
ruleTIME_LITERAL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTIME_LITERALAccess().getAlternatives()); }
(rule__TIME_LITERAL__Alternatives)
{ after(grammarAccess.getTIME_LITERALAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDURATION
entryRuleDURATION 
:
{ before(grammarAccess.getDURATIONRule()); }
	 ruleDURATION
{ after(grammarAccess.getDURATIONRule()); } 
	 EOF 
;

// Rule DURATION
ruleDURATION
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDURATIONAccess().getGroup()); }
(rule__DURATION__Group__0)
{ after(grammarAccess.getDURATIONAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleINTERVAL
entryRuleINTERVAL 
:
{ before(grammarAccess.getINTERVALRule()); }
	 ruleINTERVAL
{ after(grammarAccess.getINTERVALRule()); } 
	 EOF 
;

// Rule INTERVAL
ruleINTERVAL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getINTERVALAccess().getAlternatives()); }
(rule__INTERVAL__Alternatives)
{ after(grammarAccess.getINTERVALAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleSimple_Type_Access
entryRuleSimple_Type_Access 
:
{ before(grammarAccess.getSimple_Type_AccessRule()); }
	 ruleSimple_Type_Access
{ after(grammarAccess.getSimple_Type_AccessRule()); } 
	 EOF 
;

// Rule Simple_Type_Access
ruleSimple_Type_Access
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimple_Type_AccessAccess().getGroup()); }
(rule__Simple_Type_Access__Group__0)
{ after(grammarAccess.getSimple_Type_AccessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubrange_Type_Access
entryRuleSubrange_Type_Access 
:
{ before(grammarAccess.getSubrange_Type_AccessRule()); }
	 ruleSubrange_Type_Access
{ after(grammarAccess.getSubrange_Type_AccessRule()); } 
	 EOF 
;

// Rule Subrange_Type_Access
ruleSubrange_Type_Access
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubrange_Type_AccessAccess().getGroup()); }
(rule__Subrange_Type_Access__Group__0)
{ after(grammarAccess.getSubrange_Type_AccessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnum_Type_Access
entryRuleEnum_Type_Access 
:
{ before(grammarAccess.getEnum_Type_AccessRule()); }
	 ruleEnum_Type_Access
{ after(grammarAccess.getEnum_Type_AccessRule()); } 
	 EOF 
;

// Rule Enum_Type_Access
ruleEnum_Type_Access
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnum_Type_AccessAccess().getGroup()); }
(rule__Enum_Type_Access__Group__0)
{ after(grammarAccess.getEnum_Type_AccessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleSimple_Type_Name
entryRuleSimple_Type_Name 
:
{ before(grammarAccess.getSimple_Type_NameRule()); }
	 ruleSimple_Type_Name
{ after(grammarAccess.getSimple_Type_NameRule()); } 
	 EOF 
;

// Rule Simple_Type_Name
ruleSimple_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimple_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getSimple_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubrange_Type_Name
entryRuleSubrange_Type_Name 
:
{ before(grammarAccess.getSubrange_Type_NameRule()); }
	 ruleSubrange_Type_Name
{ after(grammarAccess.getSubrange_Type_NameRule()); } 
	 EOF 
;

// Rule Subrange_Type_Name
ruleSubrange_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubrange_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getSubrange_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnum_Type_Name
entryRuleEnum_Type_Name 
:
{ before(grammarAccess.getEnum_Type_NameRule()); }
	 ruleEnum_Type_Name
{ after(grammarAccess.getEnum_Type_NameRule()); } 
	 EOF 
;

// Rule Enum_Type_Name
ruleEnum_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnum_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getEnum_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArray_Type_Name
entryRuleArray_Type_Name 
:
{ before(grammarAccess.getArray_Type_NameRule()); }
	 ruleArray_Type_Name
{ after(grammarAccess.getArray_Type_NameRule()); } 
	 EOF 
;

// Rule Array_Type_Name
ruleArray_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArray_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getArray_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStruct_Type_Name
entryRuleStruct_Type_Name 
:
{ before(grammarAccess.getStruct_Type_NameRule()); }
	 ruleStruct_Type_Name
{ after(grammarAccess.getStruct_Type_NameRule()); } 
	 EOF 
;

// Rule Struct_Type_Name
ruleStruct_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStruct_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getStruct_Type_NameAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespace_Name
entryRuleNamespace_Name 
:
{ before(grammarAccess.getNamespace_NameRule()); }
	 ruleNamespace_Name
{ after(grammarAccess.getNamespace_NameRule()); } 
	 EOF 
;

// Rule Namespace_Name
ruleNamespace_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespace_NameAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getNamespace_NameAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__TIME_LITERAL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTIME_LITERALAccess().getDURATIONParserRuleCall_0()); }
	ruleDURATION
{ after(grammarAccess.getTIME_LITERALAccess().getDURATIONParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTIME_LITERALAccess().getTIME_OF_DAYTerminalRuleCall_1()); }
	RULE_TIME_OF_DAY
{ after(grammarAccess.getTIME_LITERALAccess().getTIME_OF_DAYTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTIME_LITERALAccess().getDATETerminalRuleCall_2()); }
	RULE_DATE
{ after(grammarAccess.getTIME_LITERALAccess().getDATETerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTIME_LITERALAccess().getDATE_AND_TIMETerminalRuleCall_3()); }
	RULE_DATE_AND_TIME
{ after(grammarAccess.getTIME_LITERALAccess().getDATE_AND_TIMETerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DURATION__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDURATIONAccess().getTIME_TYPE_NAMETerminalRuleCall_0_0()); }
	RULE_TIME_TYPE_NAME
{ after(grammarAccess.getDURATIONAccess().getTIME_TYPE_NAMETerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getDURATIONAccess().getTKeyword_0_1()); }

	'T' 

{ after(grammarAccess.getDURATIONAccess().getTKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getDURATIONAccess().getLTKeyword_0_2()); }

	'LT' 

{ after(grammarAccess.getDURATIONAccess().getLTKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DURATION__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDURATIONAccess().getPlusSignKeyword_2_0()); }

	'+' 

{ after(grammarAccess.getDURATIONAccess().getPlusSignKeyword_2_0()); }
)

    |(
{ before(grammarAccess.getDURATIONAccess().getHyphenMinusKeyword_2_1()); }

	'-' 

{ after(grammarAccess.getDURATIONAccess().getHyphenMinusKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__INTERVAL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getINTERVALAccess().getDAYSTerminalRuleCall_0()); }
	RULE_DAYS
{ after(grammarAccess.getINTERVALAccess().getDAYSTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getINTERVALAccess().getHOURSTerminalRuleCall_1()); }
	RULE_HOURS
{ after(grammarAccess.getINTERVALAccess().getHOURSTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getINTERVALAccess().getMINUTESTerminalRuleCall_2()); }
	RULE_MINUTES
{ after(grammarAccess.getINTERVALAccess().getMINUTESTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getINTERVALAccess().getSECONDSTerminalRuleCall_3()); }
	RULE_SECONDS
{ after(grammarAccess.getINTERVALAccess().getSECONDSTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getINTERVALAccess().getMILLISECONDSTerminalRuleCall_4()); }
	RULE_MILLISECONDS
{ after(grammarAccess.getINTERVALAccess().getMILLISECONDSTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getINTERVALAccess().getMICROSECONDSTerminalRuleCall_5()); }
	RULE_MICROSECONDS
{ after(grammarAccess.getINTERVALAccess().getMICROSECONDSTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getINTERVALAccess().getNANOSECONDSTerminalRuleCall_6()); }
	RULE_NANOSECONDS
{ after(grammarAccess.getINTERVALAccess().getNANOSECONDSTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__DURATION__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DURATION__Group__0__Impl
	rule__DURATION__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DURATION__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDURATIONAccess().getAlternatives_0()); }
(rule__DURATION__Alternatives_0)
{ after(grammarAccess.getDURATIONAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DURATION__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DURATION__Group__1__Impl
	rule__DURATION__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DURATION__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDURATIONAccess().getNumberSignKeyword_1()); }

	'#' 

{ after(grammarAccess.getDURATIONAccess().getNumberSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DURATION__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DURATION__Group__2__Impl
	rule__DURATION__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DURATION__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDURATIONAccess().getAlternatives_2()); }
(rule__DURATION__Alternatives_2)?
{ after(grammarAccess.getDURATIONAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DURATION__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DURATION__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DURATION__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDURATIONAccess().getINTERVALParserRuleCall_3()); }
	ruleINTERVAL
{ after(grammarAccess.getDURATIONAccess().getINTERVALParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Simple_Type_Access__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_Type_Access__Group__0__Impl
	rule__Simple_Type_Access__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_Type_Access__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_Type_AccessAccess().getGroup_0()); }
(rule__Simple_Type_Access__Group_0__0)*
{ after(grammarAccess.getSimple_Type_AccessAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Simple_Type_Access__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_Type_Access__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_Type_Access__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_Type_AccessAccess().getSimple_Type_NameParserRuleCall_1()); }
	ruleSimple_Type_Name
{ after(grammarAccess.getSimple_Type_AccessAccess().getSimple_Type_NameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Simple_Type_Access__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_Type_Access__Group_0__0__Impl
	rule__Simple_Type_Access__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_Type_Access__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_Type_AccessAccess().getNamespace_NameParserRuleCall_0_0()); }
	ruleNamespace_Name
{ after(grammarAccess.getSimple_Type_AccessAccess().getNamespace_NameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Simple_Type_Access__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_Type_Access__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_Type_Access__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_Type_AccessAccess().getDOTTerminalRuleCall_0_1()); }
	RULE_DOT
{ after(grammarAccess.getSimple_Type_AccessAccess().getDOTTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Subrange_Type_Access__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subrange_Type_Access__Group__0__Impl
	rule__Subrange_Type_Access__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrange_Type_Access__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrange_Type_AccessAccess().getGroup_0()); }
(rule__Subrange_Type_Access__Group_0__0)*
{ after(grammarAccess.getSubrange_Type_AccessAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subrange_Type_Access__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subrange_Type_Access__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrange_Type_Access__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrange_Type_AccessAccess().getSubrange_Type_NameParserRuleCall_1()); }
	ruleSubrange_Type_Name
{ after(grammarAccess.getSubrange_Type_AccessAccess().getSubrange_Type_NameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Subrange_Type_Access__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subrange_Type_Access__Group_0__0__Impl
	rule__Subrange_Type_Access__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrange_Type_Access__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrange_Type_AccessAccess().getNamespace_NameParserRuleCall_0_0()); }
	ruleNamespace_Name
{ after(grammarAccess.getSubrange_Type_AccessAccess().getNamespace_NameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subrange_Type_Access__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subrange_Type_Access__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrange_Type_Access__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrange_Type_AccessAccess().getDOTTerminalRuleCall_0_1()); }
	RULE_DOT
{ after(grammarAccess.getSubrange_Type_AccessAccess().getDOTTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Enum_Type_Access__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum_Type_Access__Group__0__Impl
	rule__Enum_Type_Access__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum_Type_Access__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnum_Type_AccessAccess().getGroup_0()); }
(rule__Enum_Type_Access__Group_0__0)*
{ after(grammarAccess.getEnum_Type_AccessAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum_Type_Access__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum_Type_Access__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum_Type_Access__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnum_Type_AccessAccess().getEnum_Type_NameParserRuleCall_1()); }
	ruleEnum_Type_Name
{ after(grammarAccess.getEnum_Type_AccessAccess().getEnum_Type_NameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Enum_Type_Access__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum_Type_Access__Group_0__0__Impl
	rule__Enum_Type_Access__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum_Type_Access__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnum_Type_AccessAccess().getNamespace_NameParserRuleCall_0_0()); }
	ruleNamespace_Name
{ after(grammarAccess.getEnum_Type_AccessAccess().getNamespace_NameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum_Type_Access__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum_Type_Access__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum_Type_Access__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnum_Type_AccessAccess().getDOTTerminalRuleCall_0_1()); }
	RULE_DOT
{ after(grammarAccess.getEnum_Type_AccessAccess().getDOTTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Test__TestAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getTestSKeyword_0()); }
(
{ before(grammarAccess.getTestAccess().getTestSKeyword_0()); }

	's' 

{ after(grammarAccess.getTestAccess().getTestSKeyword_0()); }
)

{ after(grammarAccess.getTestAccess().getTestSKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_UNDERSCORE : '_';

fragment RULE_LETTER : ('A'..'Z'|'_');

fragment RULE_DIGIT : '0'..'9';

fragment RULE_BIT : '0'..'1';

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F');

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_DIGIT)*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* '\r'? '\n';

RULE_ML_COMMENT_1 : '(*' ( options {greedy=false;} : . )*'*)';

RULE_ML_COMMENT_2 : '/*' ( options {greedy=false;} : . )*'*/';

RULE_COMMENT : (RULE_SL_COMMENT|RULE_ML_COMMENT_1|RULE_ML_COMMENT_2);

RULE_WS : (' '|'\t'|'\r'|'\n');

RULE_EOL : '\n';

RULE_PRAGMA : '{' ( options {greedy=false;} : . )*'}';

RULE_NUMERIC_LITERAL : (RULE_INT_LITERAL|RULE_REAL_LITERAL);

RULE_INT_LITERAL : ((RULE_INT_TYPE_NAME '#')? RULE_SIGNED_INT|RULE_BINARY_INT|RULE_OCTAL_INT|RULE_HEX_INT);

RULE_UNSIGNED_INT : RULE_DIGIT (RULE_UNDERSCORE? RULE_DIGIT)*;

RULE_SIGNED_INT : ('+'|'-')? RULE_UNSIGNED_INT;

RULE_BINARY_INT : '2#' (RULE_UNDERSCORE? RULE_BIT)+;

RULE_OCTAL_INT : '8#' (RULE_UNDERSCORE? RULE_OCTAL_DIGIT)+;

RULE_HEX_INT : '16#' (RULE_UNDERSCORE? RULE_HEX_DIGIT)+;

RULE_REAL_LITERAL : (RULE_REAL_TYPE_NAME '#')? RULE_SIGNED_INT RULE_DOT RULE_UNSIGNED_INT ('E' RULE_SIGNED_INT)?;

RULE_BIT_STR_LITERAL : ((RULE_MULTIBITS_TYPE_NAME '#')? RULE_UNSIGNED_INT|RULE_BINARY_INT|RULE_OCTAL_INT|RULE_HEX_INT);

RULE_BOOL_LITERAL : ((RULE_BOOL_TYPE_NAME '#')? RULE_BIT|'FALSE'|'TRUE');

RULE_CHAR_LITERAL : 'STRING#'? RULE_CHAR_STR;

RULE_CHAR_STR : (RULE_S_BYTE_CHAR_STR|RULE_D_BYTE_CHAR_STR);

RULE_S_BYTE_CHAR_STR : '\'' RULE_S_BYTE_CHAR_VALUE+ '\'';

RULE_D_BYTE_CHAR_STR : '"' RULE_D_BYTE_CHAR_VALUE+ '"';

RULE_S_BYTE_CHAR_VALUE : (RULE_COMMON_CHAR_VALUE|'$\''|'"'|'$' RULE_HEX_DIGIT RULE_HEX_DIGIT);

RULE_D_BYTE_CHAR_VALUE : (RULE_COMMON_CHAR_VALUE|'\''|'$"'|'$' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT);

fragment RULE_COMMON_CHAR_VALUE : (' '|'!'|'#'|'%'|'&'|'('..'/'|'0'..'9'|':'..'@'|'A'..'Z'|'['..'`'|'a'..'z'|'{'..'~'|'$$'|'$L'|'$N'|'$P'|'$R'|'$T');

RULE_ASSIGNMENT : ':=';

RULE_DOT : '.';

RULE_FIX_POINT : RULE_UNSIGNED_INT (RULE_DOT RULE_UNSIGNED_INT)?;

RULE_DAYS : (RULE_DAY_UNSIGNED|RULE_DAY_FLOAT);

RULE_DAY_FLOAT : RULE_FIX_POINT 'd';

RULE_DAY_UNSIGNED : (RULE_UNSIGNED_INT 'd' RULE_UNDERSCORE?)? RULE_HOURS?;

RULE_HOURS : (RULE_HOUR_UNSIGNED|RULE_HOUR_FLOAT);

RULE_HOUR_FLOAT : RULE_FIX_POINT 'h';

RULE_HOUR_UNSIGNED : (RULE_UNSIGNED_INT 'h' RULE_UNDERSCORE?)? RULE_MINUTES?;

RULE_MINUTES : (RULE_MINUTE_UNSIGNED|RULE_MINUTE_FLOAT);

RULE_MINUTE_FLOAT : RULE_FIX_POINT 'm';

RULE_MINUTE_UNSIGNED : (RULE_UNSIGNED_INT 'm' RULE_UNDERSCORE?)? RULE_SECONDS?;

RULE_SECONDS : (RULE_SECOND_UNSIGNED|RULE_SECOND_FLOAT);

RULE_SECOND_FLOAT : RULE_FIX_POINT 's';

RULE_SECOND_UNSIGNED : (RULE_UNSIGNED_INT 's' RULE_UNDERSCORE?)? RULE_MILLISECONDS?;

RULE_MILLISECONDS : (RULE_MILLISECOND_UNSIGNED|RULE_MILLISECOND_FLOAT);

RULE_MILLISECOND_FLOAT : RULE_FIX_POINT 'ms';

RULE_MILLISECOND_UNSIGNED : (RULE_UNSIGNED_INT 'ms' RULE_UNDERSCORE?)? RULE_MICROSECONDS?;

RULE_MICROSECONDS : (RULE_MICROSECOND_UNSIGNED|RULE_MICROSECOND_FLOAT);

RULE_MICROSECOND_FLOAT : RULE_FIX_POINT 'us';

RULE_MICROSECOND_UNSIGNED : (RULE_UNSIGNED_INT 'us' RULE_UNDERSCORE?)? RULE_NANOSECONDS?;

RULE_NANOSECONDS : RULE_FIX_POINT 'ns';

RULE_TIME_OF_DAY : (RULE_TOD_TYPE_NAME|'LTIME_OF_DAY') '#' RULE_DAYTIME;

RULE_DAYTIME : RULE_DAY_HOUR ':' RULE_DAY_MINUTE ':' RULE_DAY_SECOND;

RULE_DAY_HOUR : RULE_UNSIGNED_INT;

RULE_DAY_MINUTE : RULE_UNSIGNED_INT;

RULE_DAY_SECOND : RULE_FIX_POINT;

RULE_DATE : (RULE_DATE_TYPE_NAME|'D'|'LD') '#' RULE_DATE_LITERAL;

RULE_DATE_LITERAL : RULE_YEAR '-' RULE_MONTH '-' RULE_DAY;

RULE_YEAR : RULE_UNSIGNED_INT;

RULE_MONTH : RULE_UNSIGNED_INT;

RULE_DAY : RULE_UNSIGNED_INT;

RULE_DATE_AND_TIME : (RULE_DT_TYPE_NAME|'LDATE_AND_TIME') '#' RULE_DATE_LITERAL '-' RULE_DAYTIME;

RULE_ELEM_TYPE_NAME : (RULE_NUMERIC_TYPE_NAME|RULE_BIT_STR_TYPE_NAME|RULE_STRING_TYPE_NAME|RULE_DATE_TYPE_NAME|RULE_TIME_TYPE_NAME);

RULE_NUMERIC_TYPE_NAME : (RULE_INT_TYPE_NAME|RULE_REAL_TYPE_NAME);

RULE_INT_TYPE_NAME : (RULE_SIGN_INT_TYPE_NAME|RULE_UNSIGN_INT_TYPE_NAME);

RULE_SIGN_INT_TYPE_NAME : ('SINT'|'INT'|'DINT'|'LINT');

RULE_UNSIGN_INT_TYPE_NAME : ('USINT'|'UINT'|'UDINT'|'ULINT');

RULE_REAL_TYPE_NAME : ('REAL'|'LREAL');

RULE_STRING_TYPE_NAME : ('STRING' ('[' RULE_UNSIGNED_INT ']')?|'WSTRING' ('[' RULE_UNSIGNED_INT ']')?|'CHAR'|'WCHAR');

RULE_TIME_TYPE_NAME : ('TIME'|'LTIME');

RULE_DATE_TYPE_NAME : ('DATE'|'LDATE');

RULE_TOD_TYPE_NAME : ('TIME_OF_DAY'|'TOD'|'LTOD');

RULE_DT_TYPE_NAME : ('DATE_AND_TIME'|'DT'|'LDT');

RULE_BIT_STR_TYPE_NAME : (RULE_BOOL_TYPE_NAME|RULE_MULTIBITS_TYPE_NAME);

RULE_BOOL_TYPE_NAME : 'BOOL';

RULE_MULTIBITS_TYPE_NAME : ('BYTE'|'WORD'|'DWORD'|'LWORD');


