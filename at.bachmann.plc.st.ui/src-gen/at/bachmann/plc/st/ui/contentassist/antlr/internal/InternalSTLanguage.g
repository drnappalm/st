/*
* generated by Xtext
*/
grammar InternalSTLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package at.bachmann.plc.st.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.bachmann.plc.st.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.bachmann.plc.st.services.STLanguageGrammarAccess;

}

@parser::members {
 
 	private STLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(STLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuletest
entryRuletest 
:
{ before(grammarAccess.getTestRule()); }
	 ruletest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule test
ruletest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestAccess().getTestAssignment()); }
(rule__Test__TestAssignment)
{ after(grammarAccess.getTestAccess().getTestAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleNumeric_Literal
entryRuleNumeric_Literal 
:
{ before(grammarAccess.getNumeric_LiteralRule()); }
	 ruleNumeric_Literal
{ after(grammarAccess.getNumeric_LiteralRule()); } 
	 EOF 
;

// Rule Numeric_Literal
ruleNumeric_Literal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumeric_LiteralAccess().getAlternatives()); }
(rule__Numeric_Literal__Alternatives)
{ after(grammarAccess.getNumeric_LiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInt_Literal
entryRuleInt_Literal 
:
{ before(grammarAccess.getInt_LiteralRule()); }
	 ruleInt_Literal
{ after(grammarAccess.getInt_LiteralRule()); } 
	 EOF 
;

// Rule Int_Literal
ruleInt_Literal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInt_LiteralAccess().getAlternatives()); }
(rule__Int_Literal__Alternatives)
{ after(grammarAccess.getInt_LiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleUnsigned_Int_Type_Name
entryRuleUnsigned_Int_Type_Name 
:
{ before(grammarAccess.getUnsigned_Int_Type_NameRule()); }
	 ruleUnsigned_Int_Type_Name
{ after(grammarAccess.getUnsigned_Int_Type_NameRule()); } 
	 EOF 
;

// Rule Unsigned_Int_Type_Name
ruleUnsigned_Int_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnsigned_Int_Type_NameAccess().getAlternatives()); }
(rule__Unsigned_Int_Type_Name__Alternatives)
{ after(grammarAccess.getUnsigned_Int_Type_NameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSigned_Int_Type_Name
entryRuleSigned_Int_Type_Name 
:
{ before(grammarAccess.getSigned_Int_Type_NameRule()); }
	 ruleSigned_Int_Type_Name
{ after(grammarAccess.getSigned_Int_Type_NameRule()); } 
	 EOF 
;

// Rule Signed_Int_Type_Name
ruleSigned_Int_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSigned_Int_Type_NameAccess().getAlternatives()); }
(rule__Signed_Int_Type_Name__Alternatives)
{ after(grammarAccess.getSigned_Int_Type_NameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnsigned_Int
entryRuleUnsigned_Int 
:
{ before(grammarAccess.getUnsigned_IntRule()); }
	 ruleUnsigned_Int
{ after(grammarAccess.getUnsigned_IntRule()); } 
	 EOF 
;

// Rule Unsigned_Int
ruleUnsigned_Int
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnsigned_IntAccess().getValueAssignment()); }
(rule__Unsigned_Int__ValueAssignment)
{ after(grammarAccess.getUnsigned_IntAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnsigned_Int_Value
entryRuleUnsigned_Int_Value 
:
{ before(grammarAccess.getUnsigned_Int_ValueRule()); }
	 ruleUnsigned_Int_Value
{ after(grammarAccess.getUnsigned_Int_ValueRule()); } 
	 EOF 
;

// Rule Unsigned_Int_Value
ruleUnsigned_Int_Value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnsigned_Int_ValueAccess().getGroup()); }
(rule__Unsigned_Int_Value__Group__0)
{ after(grammarAccess.getUnsigned_Int_ValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSigned_Int
entryRuleSigned_Int 
:
{ before(grammarAccess.getSigned_IntRule()); }
	 ruleSigned_Int
{ after(grammarAccess.getSigned_IntRule()); } 
	 EOF 
;

// Rule Signed_Int
ruleSigned_Int
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSigned_IntAccess().getValueAssignment()); }
(rule__Signed_Int__ValueAssignment)
{ after(grammarAccess.getSigned_IntAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSigned_Int_Value
entryRuleSigned_Int_Value 
:
{ before(grammarAccess.getSigned_Int_ValueRule()); }
	 ruleSigned_Int_Value
{ after(grammarAccess.getSigned_Int_ValueRule()); } 
	 EOF 
;

// Rule Signed_Int_Value
ruleSigned_Int_Value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSigned_Int_ValueAccess().getGroup()); }
(rule__Signed_Int_Value__Group__0)
{ after(grammarAccess.getSigned_Int_ValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReal_Literal
entryRuleReal_Literal 
:
{ before(grammarAccess.getReal_LiteralRule()); }
	 ruleReal_Literal
{ after(grammarAccess.getReal_LiteralRule()); } 
	 EOF 
;

// Rule Real_Literal
ruleReal_Literal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReal_LiteralAccess().getValueAssignment()); }
(rule__Real_Literal__ValueAssignment)
{ after(grammarAccess.getReal_LiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReal_Type_Name
entryRuleReal_Type_Name 
:
{ before(grammarAccess.getReal_Type_NameRule()); }
	 ruleReal_Type_Name
{ after(grammarAccess.getReal_Type_NameRule()); } 
	 EOF 
;

// Rule Real_Type_Name
ruleReal_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReal_Type_NameAccess().getAlternatives()); }
(rule__Real_Type_Name__Alternatives)
{ after(grammarAccess.getReal_Type_NameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReal_Value
entryRuleReal_Value 
:
{ before(grammarAccess.getReal_ValueRule()); }
	 ruleReal_Value
{ after(grammarAccess.getReal_ValueRule()); } 
	 EOF 
;

// Rule Real_Value
ruleReal_Value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReal_ValueAccess().getGroup()); }
(rule__Real_Value__Group__0)
{ after(grammarAccess.getReal_ValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBit_Str_Literal
entryRuleBit_Str_Literal 
:
{ before(grammarAccess.getBit_Str_LiteralRule()); }
	 ruleBit_Str_Literal
{ after(grammarAccess.getBit_Str_LiteralRule()); } 
	 EOF 
;

// Rule Bit_Str_Literal
ruleBit_Str_Literal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBit_Str_LiteralAccess().getValueAssignment()); }
(rule__Bit_Str_Literal__ValueAssignment)
{ after(grammarAccess.getBit_Str_LiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultibits_Type_Name
entryRuleMultibits_Type_Name 
:
{ before(grammarAccess.getMultibits_Type_NameRule()); }
	 ruleMultibits_Type_Name
{ after(grammarAccess.getMultibits_Type_NameRule()); } 
	 EOF 
;

// Rule Multibits_Type_Name
ruleMultibits_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultibits_Type_NameAccess().getAlternatives()); }
(rule__Multibits_Type_Name__Alternatives)
{ after(grammarAccess.getMultibits_Type_NameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBit_Str_Value
entryRuleBit_Str_Value 
:
{ before(grammarAccess.getBit_Str_ValueRule()); }
	 ruleBit_Str_Value
{ after(grammarAccess.getBit_Str_ValueRule()); } 
	 EOF 
;

// Rule Bit_Str_Value
ruleBit_Str_Value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBit_Str_ValueAccess().getGroup()); }
(rule__Bit_Str_Value__Group__0)
{ after(grammarAccess.getBit_Str_ValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBool_Literal
entryRuleBool_Literal 
:
{ before(grammarAccess.getBool_LiteralRule()); }
	 ruleBool_Literal
{ after(grammarAccess.getBool_LiteralRule()); } 
	 EOF 
;

// Rule Bool_Literal
ruleBool_Literal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBool_LiteralAccess().getValueAssignment()); }
(rule__Bool_Literal__ValueAssignment)
{ after(grammarAccess.getBool_LiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBool_Value
entryRuleBool_Value 
:
{ before(grammarAccess.getBool_ValueRule()); }
	 ruleBool_Value
{ after(grammarAccess.getBool_ValueRule()); } 
	 EOF 
;

// Rule Bool_Value
ruleBool_Value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBool_ValueAccess().getGroup()); }
(rule__Bool_Value__Group__0)
{ after(grammarAccess.getBool_ValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBool_Type_Name
entryRuleBool_Type_Name 
:
{ before(grammarAccess.getBool_Type_NameRule()); }
	 ruleBool_Type_Name
{ after(grammarAccess.getBool_Type_NameRule()); } 
	 EOF 
;

// Rule Bool_Type_Name
ruleBool_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBool_Type_NameAccess().getBOOLKeyword()); }

	'BOOL' 

{ after(grammarAccess.getBool_Type_NameAccess().getBOOLKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChar_Literal
entryRuleChar_Literal 
:
{ before(grammarAccess.getChar_LiteralRule()); }
	 ruleChar_Literal
{ after(grammarAccess.getChar_LiteralRule()); } 
	 EOF 
;

// Rule Char_Literal
ruleChar_Literal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChar_LiteralAccess().getValueAssignment()); }
(rule__Char_Literal__ValueAssignment)
{ after(grammarAccess.getChar_LiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChar_Value
entryRuleChar_Value 
:
{ before(grammarAccess.getChar_ValueRule()); }
	 ruleChar_Value
{ after(grammarAccess.getChar_ValueRule()); } 
	 EOF 
;

// Rule Char_Value
ruleChar_Value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChar_ValueAccess().getGroup()); }
(rule__Char_Value__Group__0)
{ after(grammarAccess.getChar_ValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChar_Str
entryRuleChar_Str 
:
{ before(grammarAccess.getChar_StrRule()); }
	 ruleChar_Str
{ after(grammarAccess.getChar_StrRule()); } 
	 EOF 
;

// Rule Char_Str
ruleChar_Str
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChar_StrAccess().getAlternatives()); }
(rule__Char_Str__Alternatives)
{ after(grammarAccess.getChar_StrAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleS_Byte_Char_Str
entryRuleS_Byte_Char_Str 
:
{ before(grammarAccess.getS_Byte_Char_StrRule()); }
	 ruleS_Byte_Char_Str
{ after(grammarAccess.getS_Byte_Char_StrRule()); } 
	 EOF 
;

// Rule S_Byte_Char_Str
ruleS_Byte_Char_Str
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getS_Byte_Char_StrAccess().getGroup()); }
(rule__S_Byte_Char_Str__Group__0)
{ after(grammarAccess.getS_Byte_Char_StrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleD_Byte_Char_Str
entryRuleD_Byte_Char_Str 
:
{ before(grammarAccess.getD_Byte_Char_StrRule()); }
	 ruleD_Byte_Char_Str
{ after(grammarAccess.getD_Byte_Char_StrRule()); } 
	 EOF 
;

// Rule D_Byte_Char_Str
ruleD_Byte_Char_Str
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getD_Byte_Char_StrAccess().getGroup()); }
(rule__D_Byte_Char_Str__Group__0)
{ after(grammarAccess.getD_Byte_Char_StrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTime_Type_Name
entryRuleTime_Type_Name 
:
{ before(grammarAccess.getTime_Type_NameRule()); }
	 ruleTime_Type_Name
{ after(grammarAccess.getTime_Type_NameRule()); } 
	 EOF 
;

// Rule Time_Type_Name
ruleTime_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTime_Type_NameAccess().getAlternatives()); }
(rule__Time_Type_Name__Alternatives)
{ after(grammarAccess.getTime_Type_NameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTod_Type_Name
entryRuleTod_Type_Name 
:
{ before(grammarAccess.getTod_Type_NameRule()); }
	 ruleTod_Type_Name
{ after(grammarAccess.getTod_Type_NameRule()); } 
	 EOF 
;

// Rule Tod_Type_Name
ruleTod_Type_Name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTod_Type_NameAccess().getAlternatives()); }
(rule__Tod_Type_Name__Alternatives)
{ after(grammarAccess.getTod_Type_NameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleTime_Literal
entryRuleTime_Literal 
:
{ before(grammarAccess.getTime_LiteralRule()); }
	 ruleTime_Literal
{ after(grammarAccess.getTime_LiteralRule()); } 
	 EOF 
;

// Rule Time_Literal
ruleTime_Literal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTime_LiteralAccess().getAlternatives()); }
(rule__Time_Literal__Alternatives)
{ after(grammarAccess.getTime_LiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDuration
entryRuleDuration 
:
{ before(grammarAccess.getDurationRule()); }
	 ruleDuration
{ after(grammarAccess.getDurationRule()); } 
	 EOF 
;

// Rule Duration
ruleDuration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDurationAccess().getValueAssignment()); }
(rule__Duration__ValueAssignment)
{ after(grammarAccess.getDurationAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDuration_Value
entryRuleDuration_Value 
:
{ before(grammarAccess.getDuration_ValueRule()); }
	 ruleDuration_Value
{ after(grammarAccess.getDuration_ValueRule()); } 
	 EOF 
;

// Rule Duration_Value
ruleDuration_Value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDuration_ValueAccess().getGroup()); }
(rule__Duration_Value__Group__0)
{ after(grammarAccess.getDuration_ValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTime_Of_Day
entryRuleTime_Of_Day 
:
{ before(grammarAccess.getTime_Of_DayRule()); }
	 ruleTime_Of_Day
{ after(grammarAccess.getTime_Of_DayRule()); } 
	 EOF 
;

// Rule Time_Of_Day
ruleTime_Of_Day
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTime_Of_DayAccess().getValueAssignment()); }
(rule__Time_Of_Day__ValueAssignment)
{ after(grammarAccess.getTime_Of_DayAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTime_Of_Day_Value
entryRuleTime_Of_Day_Value 
:
{ before(grammarAccess.getTime_Of_Day_ValueRule()); }
	 ruleTime_Of_Day_Value
{ after(grammarAccess.getTime_Of_Day_ValueRule()); } 
	 EOF 
;

// Rule Time_Of_Day_Value
ruleTime_Of_Day_Value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTime_Of_Day_ValueAccess().getGroup()); }
(rule__Time_Of_Day_Value__Group__0)
{ after(grammarAccess.getTime_Of_Day_ValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleDate
entryRuleDate 
:
{ before(grammarAccess.getDateRule()); }
	 ruleDate
{ after(grammarAccess.getDateRule()); } 
	 EOF 
;

// Rule Date
ruleDate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateAccess().getValueAssignment()); }
(rule__Date__ValueAssignment)
{ after(grammarAccess.getDateAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDate_And_Time
entryRuleDate_And_Time 
:
{ before(grammarAccess.getDate_And_TimeRule()); }
	 ruleDate_And_Time
{ after(grammarAccess.getDate_And_TimeRule()); } 
	 EOF 
;

// Rule Date_And_Time
ruleDate_And_Time
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDate_And_TimeAccess().getValueAssignment()); }
(rule__Date_And_Time__ValueAssignment)
{ after(grammarAccess.getDate_And_TimeAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDate_And_Time_Value
entryRuleDate_And_Time_Value 
:
{ before(grammarAccess.getDate_And_Time_ValueRule()); }
	 ruleDate_And_Time_Value
{ after(grammarAccess.getDate_And_Time_ValueRule()); } 
	 EOF 
;

// Rule Date_And_Time_Value
ruleDate_And_Time_Value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getGroup()); }
(rule__Date_And_Time_Value__Group__0)
{ after(grammarAccess.getDate_And_Time_ValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__Numeric_Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_LiteralAccess().getInt_LiteralParserRuleCall_0()); }
	ruleInt_Literal
{ after(grammarAccess.getNumeric_LiteralAccess().getInt_LiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumeric_LiteralAccess().getReal_LiteralParserRuleCall_1()); }
	ruleReal_Literal
{ after(grammarAccess.getNumeric_LiteralAccess().getReal_LiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Int_Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInt_LiteralAccess().getSigned_IntParserRuleCall_0()); }
	ruleSigned_Int
{ after(grammarAccess.getInt_LiteralAccess().getSigned_IntParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInt_LiteralAccess().getUnsigned_IntParserRuleCall_1()); }
	ruleUnsigned_Int
{ after(grammarAccess.getInt_LiteralAccess().getUnsigned_IntParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unsigned_Int_Type_Name__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsigned_Int_Type_NameAccess().getUSINTKeyword_0()); }

	'USINT' 

{ after(grammarAccess.getUnsigned_Int_Type_NameAccess().getUSINTKeyword_0()); }
)

    |(
{ before(grammarAccess.getUnsigned_Int_Type_NameAccess().getUINTKeyword_1()); }

	'UINT' 

{ after(grammarAccess.getUnsigned_Int_Type_NameAccess().getUINTKeyword_1()); }
)

    |(
{ before(grammarAccess.getUnsigned_Int_Type_NameAccess().getUDINTKeyword_2()); }

	'UDINT' 

{ after(grammarAccess.getUnsigned_Int_Type_NameAccess().getUDINTKeyword_2()); }
)

    |(
{ before(grammarAccess.getUnsigned_Int_Type_NameAccess().getULINTKeyword_3()); }

	'ULINT' 

{ after(grammarAccess.getUnsigned_Int_Type_NameAccess().getULINTKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signed_Int_Type_Name__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigned_Int_Type_NameAccess().getSINTKeyword_0()); }

	'SINT' 

{ after(grammarAccess.getSigned_Int_Type_NameAccess().getSINTKeyword_0()); }
)

    |(
{ before(grammarAccess.getSigned_Int_Type_NameAccess().getINTKeyword_1()); }

	'INT' 

{ after(grammarAccess.getSigned_Int_Type_NameAccess().getINTKeyword_1()); }
)

    |(
{ before(grammarAccess.getSigned_Int_Type_NameAccess().getDINTKeyword_2()); }

	'DINT' 

{ after(grammarAccess.getSigned_Int_Type_NameAccess().getDINTKeyword_2()); }
)

    |(
{ before(grammarAccess.getSigned_Int_Type_NameAccess().getLINTKeyword_3()); }

	'LINT' 

{ after(grammarAccess.getSigned_Int_Type_NameAccess().getLINTKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unsigned_Int_Value__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsigned_Int_ValueAccess().getBIN_VALUETerminalRuleCall_1_0()); }
	RULE_BIN_VALUE
{ after(grammarAccess.getUnsigned_Int_ValueAccess().getBIN_VALUETerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getUnsigned_Int_ValueAccess().getOCT_VALUETerminalRuleCall_1_1()); }
	RULE_OCT_VALUE
{ after(grammarAccess.getUnsigned_Int_ValueAccess().getOCT_VALUETerminalRuleCall_1_1()); }
)

    |(
{ before(grammarAccess.getUnsigned_Int_ValueAccess().getDEC_VALUETerminalRuleCall_1_2()); }
	RULE_DEC_VALUE
{ after(grammarAccess.getUnsigned_Int_ValueAccess().getDEC_VALUETerminalRuleCall_1_2()); }
)

    |(
{ before(grammarAccess.getUnsigned_Int_ValueAccess().getHEX_VALUETerminalRuleCall_1_3()); }
	RULE_HEX_VALUE
{ after(grammarAccess.getUnsigned_Int_ValueAccess().getHEX_VALUETerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signed_Int_Value__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigned_Int_ValueAccess().getBIN_VALUETerminalRuleCall_1_0()); }
	RULE_BIN_VALUE
{ after(grammarAccess.getSigned_Int_ValueAccess().getBIN_VALUETerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getSigned_Int_ValueAccess().getOCT_VALUETerminalRuleCall_1_1()); }
	RULE_OCT_VALUE
{ after(grammarAccess.getSigned_Int_ValueAccess().getOCT_VALUETerminalRuleCall_1_1()); }
)

    |(
{ before(grammarAccess.getSigned_Int_ValueAccess().getGroup_1_2()); }
(rule__Signed_Int_Value__Group_1_2__0)
{ after(grammarAccess.getSigned_Int_ValueAccess().getGroup_1_2()); }
)

    |(
{ before(grammarAccess.getSigned_Int_ValueAccess().getHEX_VALUETerminalRuleCall_1_3()); }
	RULE_HEX_VALUE
{ after(grammarAccess.getSigned_Int_ValueAccess().getHEX_VALUETerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signed_Int_Value__Alternatives_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigned_Int_ValueAccess().getPlusSignKeyword_1_2_0_0()); }

	'+' 

{ after(grammarAccess.getSigned_Int_ValueAccess().getPlusSignKeyword_1_2_0_0()); }
)

    |(
{ before(grammarAccess.getSigned_Int_ValueAccess().getHyphenMinusKeyword_1_2_0_1()); }

	'-' 

{ after(grammarAccess.getSigned_Int_ValueAccess().getHyphenMinusKeyword_1_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Real_Type_Name__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_Type_NameAccess().getLREALKeyword_0()); }

	'LREAL' 

{ after(grammarAccess.getReal_Type_NameAccess().getLREALKeyword_0()); }
)

    |(
{ before(grammarAccess.getReal_Type_NameAccess().getREALKeyword_1()); }

	'REAL' 

{ after(grammarAccess.getReal_Type_NameAccess().getREALKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Real_Value__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_ValueAccess().getPlusSignKeyword_1_0()); }

	'+' 

{ after(grammarAccess.getReal_ValueAccess().getPlusSignKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getReal_ValueAccess().getHyphenMinusKeyword_1_1()); }

	'-' 

{ after(grammarAccess.getReal_ValueAccess().getHyphenMinusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multibits_Type_Name__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultibits_Type_NameAccess().getBYTEKeyword_0()); }

	'BYTE' 

{ after(grammarAccess.getMultibits_Type_NameAccess().getBYTEKeyword_0()); }
)

    |(
{ before(grammarAccess.getMultibits_Type_NameAccess().getWORDKeyword_1()); }

	'WORD' 

{ after(grammarAccess.getMultibits_Type_NameAccess().getWORDKeyword_1()); }
)

    |(
{ before(grammarAccess.getMultibits_Type_NameAccess().getDWORDKeyword_2()); }

	'DWORD' 

{ after(grammarAccess.getMultibits_Type_NameAccess().getDWORDKeyword_2()); }
)

    |(
{ before(grammarAccess.getMultibits_Type_NameAccess().getLWORDKeyword_3()); }

	'LWORD' 

{ after(grammarAccess.getMultibits_Type_NameAccess().getLWORDKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bit_Str_Value__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBit_Str_ValueAccess().getBIN_VALUETerminalRuleCall_2_0()); }
	RULE_BIN_VALUE
{ after(grammarAccess.getBit_Str_ValueAccess().getBIN_VALUETerminalRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getBit_Str_ValueAccess().getOCT_VALUETerminalRuleCall_2_1()); }
	RULE_OCT_VALUE
{ after(grammarAccess.getBit_Str_ValueAccess().getOCT_VALUETerminalRuleCall_2_1()); }
)

    |(
{ before(grammarAccess.getBit_Str_ValueAccess().getDEC_VALUETerminalRuleCall_2_2()); }
	RULE_DEC_VALUE
{ after(grammarAccess.getBit_Str_ValueAccess().getDEC_VALUETerminalRuleCall_2_2()); }
)

    |(
{ before(grammarAccess.getBit_Str_ValueAccess().getHEX_VALUETerminalRuleCall_2_3()); }
	RULE_HEX_VALUE
{ after(grammarAccess.getBit_Str_ValueAccess().getHEX_VALUETerminalRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool_Value__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBool_ValueAccess().getDigitZeroKeyword_1_0()); }

	'0' 

{ after(grammarAccess.getBool_ValueAccess().getDigitZeroKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getBool_ValueAccess().getDigitOneKeyword_1_1()); }

	'1' 

{ after(grammarAccess.getBool_ValueAccess().getDigitOneKeyword_1_1()); }
)

    |(
{ before(grammarAccess.getBool_ValueAccess().getFALSEKeyword_1_2()); }

	'FALSE' 

{ after(grammarAccess.getBool_ValueAccess().getFALSEKeyword_1_2()); }
)

    |(
{ before(grammarAccess.getBool_ValueAccess().getTRUEKeyword_1_3()); }

	'TRUE' 

{ after(grammarAccess.getBool_ValueAccess().getTRUEKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Char_Str__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChar_StrAccess().getS_Byte_Char_StrParserRuleCall_0()); }
	ruleS_Byte_Char_Str
{ after(grammarAccess.getChar_StrAccess().getS_Byte_Char_StrParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getChar_StrAccess().getD_Byte_Char_StrParserRuleCall_1()); }
	ruleD_Byte_Char_Str
{ after(grammarAccess.getChar_StrAccess().getD_Byte_Char_StrParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Time_Type_Name__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTime_Type_NameAccess().getTIMEKeyword_0()); }

	'TIME' 

{ after(grammarAccess.getTime_Type_NameAccess().getTIMEKeyword_0()); }
)

    |(
{ before(grammarAccess.getTime_Type_NameAccess().getLTIMEKeyword_1()); }

	'LTIME' 

{ after(grammarAccess.getTime_Type_NameAccess().getLTIMEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tod_Type_Name__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTod_Type_NameAccess().getTIME_OF_DAYKeyword_0()); }

	'TIME_OF_DAY' 

{ after(grammarAccess.getTod_Type_NameAccess().getTIME_OF_DAYKeyword_0()); }
)

    |(
{ before(grammarAccess.getTod_Type_NameAccess().getTODKeyword_1()); }

	'TOD' 

{ after(grammarAccess.getTod_Type_NameAccess().getTODKeyword_1()); }
)

    |(
{ before(grammarAccess.getTod_Type_NameAccess().getLTODKeyword_2()); }

	'LTOD' 

{ after(grammarAccess.getTod_Type_NameAccess().getLTODKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Time_Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTime_LiteralAccess().getDurationParserRuleCall_0()); }
	ruleDuration
{ after(grammarAccess.getTime_LiteralAccess().getDurationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTime_LiteralAccess().getTime_Of_DayParserRuleCall_1()); }
	ruleTime_Of_Day
{ after(grammarAccess.getTime_LiteralAccess().getTime_Of_DayParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTime_LiteralAccess().getDateParserRuleCall_2()); }
	ruleDate
{ after(grammarAccess.getTime_LiteralAccess().getDateParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTime_LiteralAccess().getDate_And_TimeParserRuleCall_3()); }
	ruleDate_And_Time
{ after(grammarAccess.getTime_LiteralAccess().getDate_And_TimeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Duration_Value__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDuration_ValueAccess().getTime_Type_NameParserRuleCall_0_0()); }
	ruleTime_Type_Name
{ after(grammarAccess.getDuration_ValueAccess().getTime_Type_NameParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getDuration_ValueAccess().getTKeyword_0_1()); }

	'T' 

{ after(grammarAccess.getDuration_ValueAccess().getTKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getDuration_ValueAccess().getLTKeyword_0_2()); }

	'LT' 

{ after(grammarAccess.getDuration_ValueAccess().getLTKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Duration_Value__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDuration_ValueAccess().getPlusSignKeyword_2_0()); }

	'+' 

{ after(grammarAccess.getDuration_ValueAccess().getPlusSignKeyword_2_0()); }
)

    |(
{ before(grammarAccess.getDuration_ValueAccess().getHyphenMinusKeyword_2_1()); }

	'-' 

{ after(grammarAccess.getDuration_ValueAccess().getHyphenMinusKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Time_Of_Day_Value__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTime_Of_Day_ValueAccess().getTod_Type_NameParserRuleCall_0_0()); }
	ruleTod_Type_Name
{ after(grammarAccess.getTime_Of_Day_ValueAccess().getTod_Type_NameParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getTime_Of_Day_ValueAccess().getLTIME_OF_DAYKeyword_0_1()); }

	'LTIME_OF_DAY' 

{ after(grammarAccess.getTime_Of_Day_ValueAccess().getLTIME_OF_DAYKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Date_And_Time_Value__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getDATE_AND_TIMEKeyword_0_0()); }

	'DATE_AND_TIME' 

{ after(grammarAccess.getDate_And_Time_ValueAccess().getDATE_AND_TIMEKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getLDATE_AND_TIMEKeyword_0_1()); }

	'LDATE_AND_TIME' 

{ after(grammarAccess.getDate_And_Time_ValueAccess().getLDATE_AND_TIMEKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getDTKeyword_0_2()); }

	'DT' 

{ after(grammarAccess.getDate_And_Time_ValueAccess().getDTKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getLDTKeyword_0_3()); }

	'LDT' 

{ after(grammarAccess.getDate_And_Time_ValueAccess().getLDTKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Unsigned_Int_Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unsigned_Int_Value__Group__0__Impl
	rule__Unsigned_Int_Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unsigned_Int_Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsigned_Int_ValueAccess().getUnsigned_Int_Type_NameParserRuleCall_0()); }
	ruleUnsigned_Int_Type_Name
{ after(grammarAccess.getUnsigned_Int_ValueAccess().getUnsigned_Int_Type_NameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unsigned_Int_Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unsigned_Int_Value__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unsigned_Int_Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsigned_Int_ValueAccess().getAlternatives_1()); }
(rule__Unsigned_Int_Value__Alternatives_1)
{ after(grammarAccess.getUnsigned_Int_ValueAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signed_Int_Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signed_Int_Value__Group__0__Impl
	rule__Signed_Int_Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signed_Int_Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigned_Int_ValueAccess().getSigned_Int_Type_NameParserRuleCall_0()); }
	ruleSigned_Int_Type_Name
{ after(grammarAccess.getSigned_Int_ValueAccess().getSigned_Int_Type_NameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signed_Int_Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signed_Int_Value__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signed_Int_Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigned_Int_ValueAccess().getAlternatives_1()); }
(rule__Signed_Int_Value__Alternatives_1)
{ after(grammarAccess.getSigned_Int_ValueAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signed_Int_Value__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signed_Int_Value__Group_1_2__0__Impl
	rule__Signed_Int_Value__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signed_Int_Value__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigned_Int_ValueAccess().getAlternatives_1_2_0()); }
(rule__Signed_Int_Value__Alternatives_1_2_0)?
{ after(grammarAccess.getSigned_Int_ValueAccess().getAlternatives_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signed_Int_Value__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signed_Int_Value__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signed_Int_Value__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigned_Int_ValueAccess().getDEC_VALUETerminalRuleCall_1_2_1()); }
	RULE_DEC_VALUE
{ after(grammarAccess.getSigned_Int_ValueAccess().getDEC_VALUETerminalRuleCall_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Real_Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real_Value__Group__0__Impl
	rule__Real_Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real_Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_ValueAccess().getReal_Type_NameParserRuleCall_0()); }
	ruleReal_Type_Name
{ after(grammarAccess.getReal_ValueAccess().getReal_Type_NameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real_Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real_Value__Group__1__Impl
	rule__Real_Value__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real_Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_ValueAccess().getAlternatives_1()); }
(rule__Real_Value__Alternatives_1)?
{ after(grammarAccess.getReal_ValueAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real_Value__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real_Value__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real_Value__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_ValueAccess().getFLOAT_VALUETerminalRuleCall_2()); }
	RULE_FLOAT_VALUE
{ after(grammarAccess.getReal_ValueAccess().getFLOAT_VALUETerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Bit_Str_Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bit_Str_Value__Group__0__Impl
	rule__Bit_Str_Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bit_Str_Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBit_Str_ValueAccess().getMultibits_Type_NameParserRuleCall_0()); }
	ruleMultibits_Type_Name
{ after(grammarAccess.getBit_Str_ValueAccess().getMultibits_Type_NameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bit_Str_Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bit_Str_Value__Group__1__Impl
	rule__Bit_Str_Value__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bit_Str_Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBit_Str_ValueAccess().getNumberSignKeyword_1()); }

	'#' 

{ after(grammarAccess.getBit_Str_ValueAccess().getNumberSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bit_Str_Value__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bit_Str_Value__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bit_Str_Value__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBit_Str_ValueAccess().getAlternatives_2()); }
(rule__Bit_Str_Value__Alternatives_2)
{ after(grammarAccess.getBit_Str_ValueAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Bool_Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool_Value__Group__0__Impl
	rule__Bool_Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool_Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBool_ValueAccess().getGroup_0()); }
(rule__Bool_Value__Group_0__0)?
{ after(grammarAccess.getBool_ValueAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bool_Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool_Value__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool_Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBool_ValueAccess().getAlternatives_1()); }
(rule__Bool_Value__Alternatives_1)
{ after(grammarAccess.getBool_ValueAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Bool_Value__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool_Value__Group_0__0__Impl
	rule__Bool_Value__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool_Value__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBool_ValueAccess().getBool_Type_NameParserRuleCall_0_0()); }
	ruleBool_Type_Name
{ after(grammarAccess.getBool_ValueAccess().getBool_Type_NameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bool_Value__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool_Value__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool_Value__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBool_ValueAccess().getNumberSignKeyword_0_1()); }

	'#' 

{ after(grammarAccess.getBool_ValueAccess().getNumberSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Char_Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Char_Value__Group__0__Impl
	rule__Char_Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Char_Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChar_ValueAccess().getSTRINGKeyword_0()); }
(
	'STRING#' 
)?
{ after(grammarAccess.getChar_ValueAccess().getSTRINGKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Char_Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Char_Value__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Char_Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChar_ValueAccess().getChar_StrParserRuleCall_1()); }
	ruleChar_Str
{ after(grammarAccess.getChar_ValueAccess().getChar_StrParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__S_Byte_Char_Str__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__S_Byte_Char_Str__Group__0__Impl
	rule__S_Byte_Char_Str__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__S_Byte_Char_Str__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getS_Byte_Char_StrAccess().getApostropheKeyword_0()); }

	'\'' 

{ after(grammarAccess.getS_Byte_Char_StrAccess().getApostropheKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__S_Byte_Char_Str__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__S_Byte_Char_Str__Group__1__Impl
	rule__S_Byte_Char_Str__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__S_Byte_Char_Str__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getS_Byte_Char_StrAccess().getS_BYTE_CHAR_VALUETerminalRuleCall_1()); }
(	RULE_S_BYTE_CHAR_VALUE)
{ after(grammarAccess.getS_Byte_Char_StrAccess().getS_BYTE_CHAR_VALUETerminalRuleCall_1()); }
)
(
{ before(grammarAccess.getS_Byte_Char_StrAccess().getS_BYTE_CHAR_VALUETerminalRuleCall_1()); }
(	RULE_S_BYTE_CHAR_VALUE)*
{ after(grammarAccess.getS_Byte_Char_StrAccess().getS_BYTE_CHAR_VALUETerminalRuleCall_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__S_Byte_Char_Str__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__S_Byte_Char_Str__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__S_Byte_Char_Str__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getS_Byte_Char_StrAccess().getApostropheKeyword_2()); }

	'\'' 

{ after(grammarAccess.getS_Byte_Char_StrAccess().getApostropheKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__D_Byte_Char_Str__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__D_Byte_Char_Str__Group__0__Impl
	rule__D_Byte_Char_Str__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__D_Byte_Char_Str__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getD_Byte_Char_StrAccess().getQuotationMarkKeyword_0()); }

	'"' 

{ after(grammarAccess.getD_Byte_Char_StrAccess().getQuotationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__D_Byte_Char_Str__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__D_Byte_Char_Str__Group__1__Impl
	rule__D_Byte_Char_Str__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__D_Byte_Char_Str__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getD_Byte_Char_StrAccess().getD_BYTE_CHAR_VALUETerminalRuleCall_1()); }
(	RULE_D_BYTE_CHAR_VALUE)
{ after(grammarAccess.getD_Byte_Char_StrAccess().getD_BYTE_CHAR_VALUETerminalRuleCall_1()); }
)
(
{ before(grammarAccess.getD_Byte_Char_StrAccess().getD_BYTE_CHAR_VALUETerminalRuleCall_1()); }
(	RULE_D_BYTE_CHAR_VALUE)*
{ after(grammarAccess.getD_Byte_Char_StrAccess().getD_BYTE_CHAR_VALUETerminalRuleCall_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__D_Byte_Char_Str__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__D_Byte_Char_Str__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__D_Byte_Char_Str__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getD_Byte_Char_StrAccess().getQuotationMarkKeyword_2()); }

	'"' 

{ after(grammarAccess.getD_Byte_Char_StrAccess().getQuotationMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Duration_Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Duration_Value__Group__0__Impl
	rule__Duration_Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration_Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDuration_ValueAccess().getAlternatives_0()); }
(rule__Duration_Value__Alternatives_0)
{ after(grammarAccess.getDuration_ValueAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Duration_Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Duration_Value__Group__1__Impl
	rule__Duration_Value__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration_Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDuration_ValueAccess().getNumberSignKeyword_1()); }

	'#' 

{ after(grammarAccess.getDuration_ValueAccess().getNumberSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Duration_Value__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Duration_Value__Group__2__Impl
	rule__Duration_Value__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration_Value__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDuration_ValueAccess().getAlternatives_2()); }
(rule__Duration_Value__Alternatives_2)?
{ after(grammarAccess.getDuration_ValueAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Duration_Value__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Duration_Value__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration_Value__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDuration_ValueAccess().getINTERVALTerminalRuleCall_3()); }
	RULE_INTERVAL
{ after(grammarAccess.getDuration_ValueAccess().getINTERVALTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Time_Of_Day_Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Time_Of_Day_Value__Group__0__Impl
	rule__Time_Of_Day_Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time_Of_Day_Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTime_Of_Day_ValueAccess().getAlternatives_0()); }
(rule__Time_Of_Day_Value__Alternatives_0)
{ after(grammarAccess.getTime_Of_Day_ValueAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Time_Of_Day_Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Time_Of_Day_Value__Group__1__Impl
	rule__Time_Of_Day_Value__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Time_Of_Day_Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTime_Of_Day_ValueAccess().getNumberSignKeyword_1()); }

	'#' 

{ after(grammarAccess.getTime_Of_Day_ValueAccess().getNumberSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Time_Of_Day_Value__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Time_Of_Day_Value__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time_Of_Day_Value__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTime_Of_Day_ValueAccess().getDAYTIME_VALUETerminalRuleCall_2()); }
	RULE_DAYTIME_VALUE
{ after(grammarAccess.getTime_Of_Day_ValueAccess().getDAYTIME_VALUETerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Date_And_Time_Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Date_And_Time_Value__Group__0__Impl
	rule__Date_And_Time_Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Date_And_Time_Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getAlternatives_0()); }
(rule__Date_And_Time_Value__Alternatives_0)
{ after(grammarAccess.getDate_And_Time_ValueAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Date_And_Time_Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Date_And_Time_Value__Group__1__Impl
	rule__Date_And_Time_Value__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Date_And_Time_Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getNumberSignKeyword_1()); }

	'#' 

{ after(grammarAccess.getDate_And_Time_ValueAccess().getNumberSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Date_And_Time_Value__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Date_And_Time_Value__Group__2__Impl
	rule__Date_And_Time_Value__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Date_And_Time_Value__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getDATE_LITERALTerminalRuleCall_2()); }
	RULE_DATE_LITERAL
{ after(grammarAccess.getDate_And_Time_ValueAccess().getDATE_LITERALTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Date_And_Time_Value__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Date_And_Time_Value__Group__3__Impl
	rule__Date_And_Time_Value__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Date_And_Time_Value__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getHyphenMinusKeyword_3()); }

	'-' 

{ after(grammarAccess.getDate_And_Time_ValueAccess().getHyphenMinusKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Date_And_Time_Value__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Date_And_Time_Value__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Date_And_Time_Value__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDate_And_Time_ValueAccess().getDAYTIME_VALUETerminalRuleCall_4()); }
	RULE_DAYTIME_VALUE
{ after(grammarAccess.getDate_And_Time_ValueAccess().getDAYTIME_VALUETerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__Test__TestAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getTestTKeyword_0()); }
(
{ before(grammarAccess.getTestAccess().getTestTKeyword_0()); }

	't' 

{ after(grammarAccess.getTestAccess().getTestTKeyword_0()); }
)

{ after(grammarAccess.getTestAccess().getTestTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unsigned_Int__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsigned_IntAccess().getValueUnsigned_Int_ValueParserRuleCall_0()); }
	ruleUnsigned_Int_Value{ after(grammarAccess.getUnsigned_IntAccess().getValueUnsigned_Int_ValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signed_Int__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigned_IntAccess().getValueSigned_Int_ValueParserRuleCall_0()); }
	ruleSigned_Int_Value{ after(grammarAccess.getSigned_IntAccess().getValueSigned_Int_ValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Real_Literal__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_LiteralAccess().getValueReal_ValueParserRuleCall_0()); }
	ruleReal_Value{ after(grammarAccess.getReal_LiteralAccess().getValueReal_ValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bit_Str_Literal__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBit_Str_LiteralAccess().getValueBit_Str_ValueParserRuleCall_0()); }
	ruleBit_Str_Value{ after(grammarAccess.getBit_Str_LiteralAccess().getValueBit_Str_ValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool_Literal__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBool_LiteralAccess().getValueBool_ValueParserRuleCall_0()); }
	ruleBool_Value{ after(grammarAccess.getBool_LiteralAccess().getValueBool_ValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Char_Literal__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChar_LiteralAccess().getValueChar_ValueParserRuleCall_0()); }
	ruleChar_Value{ after(grammarAccess.getChar_LiteralAccess().getValueChar_ValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDurationAccess().getValueDuration_ValueParserRuleCall_0()); }
	ruleDuration_Value{ after(grammarAccess.getDurationAccess().getValueDuration_ValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Time_Of_Day__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTime_Of_DayAccess().getValueTime_Of_Day_ValueParserRuleCall_0()); }
	ruleTime_Of_Day_Value{ after(grammarAccess.getTime_Of_DayAccess().getValueTime_Of_Day_ValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Date__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateAccess().getValueDATE_VALUETerminalRuleCall_0()); }
	RULE_DATE_VALUE{ after(grammarAccess.getDateAccess().getValueDATE_VALUETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Date_And_Time__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDate_And_TimeAccess().getValueDate_And_Time_ValueParserRuleCall_0()); }
	ruleDate_And_Time_Value{ after(grammarAccess.getDate_And_TimeAccess().getValueDate_And_Time_ValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_LETTER : ('A'..'Z'|'a'..'z'|'_');

fragment RULE_BIT : '0'..'1';

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_DIGIT : '0'..'9';

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F');

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_DIGIT)*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* '\r'? '\n';

RULE_ML_COMMENT_1 : '(*' ( options {greedy=false;} : . )*'*)';

RULE_ML_COMMENT_2 : '/*' ( options {greedy=false;} : . )*'*/';

fragment RULE_WS : (' '|'\t'|'\r'|'\n');

fragment RULE_EOL : '\n';

RULE_PRAGMA : '{' ( options {greedy=false;} : . )*'}';

RULE_BIN_VALUE : '2#' ('_'? RULE_BIT)+;

RULE_OCT_VALUE : '8#' ('_'? RULE_OCTAL_DIGIT)+;

RULE_HEX_VALUE : '16#' ('_'? RULE_HEX_DIGIT)+;

RULE_DEC_VALUE : RULE_DIGIT (RULE_DIGIT|'_' RULE_DIGIT)*;

fragment RULE_FIX_POINT : RULE_DEC_VALUE '.' RULE_DEC_VALUE;

RULE_FLOAT_VALUE : RULE_FIX_POINT (('E'|'e') ('+'|'-')? RULE_DEC_VALUE)?;

RULE_S_BYTE_CHAR_VALUE : (RULE_COMMON_CHAR_VALUE|'$\''|'"'|'$' RULE_HEX_DIGIT RULE_HEX_DIGIT);

RULE_D_BYTE_CHAR_VALUE : (RULE_COMMON_CHAR_VALUE|'\''|'$"'|'$' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT);

fragment RULE_COMMON_CHAR_VALUE : (' '|'!'|'#'|'%'|'&'|'('..'/'|'0'..'9'|':'..'@'|'A'..'Z'|'['..'`'|'a'..'z'|'{'..'~'|'$$'|'$L'|'$N'|'$P'|'$R'|'$T');

RULE_INTERVAL : RULE_DAYS? RULE_HOURS? RULE_MINUTES? RULE_SECONDS? RULE_MILLISECONDS? RULE_MICROSECONDS? RULE_NANOSECONDS?;

fragment RULE_DAYS : (RULE_FIX_POINT ('d'|'D')|RULE_DEC_VALUE ('d'|'D') '_'?);

fragment RULE_HOURS : (RULE_FIX_POINT ('h'|'H')|RULE_DEC_VALUE ('h'|'H') '_'?);

fragment RULE_MINUTES : (RULE_FIX_POINT ('m'|'M')|RULE_DEC_VALUE ('m'|'M') '_'?);

fragment RULE_SECONDS : (RULE_FIX_POINT ('s'|'S')|RULE_DEC_VALUE ('s'|'S') '_'?);

fragment RULE_MILLISECONDS : (RULE_FIX_POINT ('ms'|'Ms'|'mS'|'MS')|RULE_DEC_VALUE ('ms'|'Ms'|'mS'|'MS') '_'?);

fragment RULE_MICROSECONDS : (RULE_FIX_POINT ('u'|'U') ('s'|'S')|RULE_DEC_VALUE ('u'|'U') ('s'|'S') '_'?);

fragment RULE_NANOSECONDS : (RULE_FIX_POINT ('n'|'N') ('s'|'S')|RULE_DEC_VALUE ('n'|'N') ('s'|'S'));

RULE_DAYTIME_VALUE : RULE_DEC_VALUE ':' RULE_DEC_VALUE ':' RULE_FIX_POINT;

RULE_DATE_VALUE : ('DATE'|'LDATE'|'D'|'LD') '#' RULE_DATE_LITERAL;

RULE_DATE_LITERAL : RULE_DEC_VALUE '-' RULE_DEC_VALUE '-' RULE_DEC_VALUE;


